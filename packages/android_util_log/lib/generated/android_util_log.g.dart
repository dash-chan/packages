// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.util.Log`
class Log extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Log> $type;

  @jni$_.internal
  Log.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/util/Log');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Log$NullableType();
  static const type = $Log$Type();

  /// from: `static public final int ASSERT`
  static const ASSERT = 7;

  /// from: `static public final int DEBUG`
  static const DEBUG = 3;

  /// from: `static public final int ERROR`
  static const ERROR = 6;

  /// from: `static public final int INFO`
  static const INFO = 4;

  /// from: `static public final int VERBOSE`
  static const VERBOSE = 2;

  /// from: `static public final int WARN`
  static const WARN = 5;
  static final _id_v = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _v =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int v(java.lang.String string, java.lang.String string1)`
  static int v(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _v(
      _class.reference.pointer,
      _id_v as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_v$1 = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _v$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int v(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int v$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _v$1(
      _class.reference.pointer,
      _id_v$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_d = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _d =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int d(java.lang.String string, java.lang.String string1)`
  static int d(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _d(
      _class.reference.pointer,
      _id_d as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_d$1 = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _d$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int d(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int d$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _d$1(
      _class.reference.pointer,
      _id_d$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_i = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _i =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int i(java.lang.String string, java.lang.String string1)`
  static int i(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _i(
      _class.reference.pointer,
      _id_i as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_i$1 = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _i$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int i(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int i$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _i$1(
      _class.reference.pointer,
      _id_i$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_w = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _w =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int w(java.lang.String string, java.lang.String string1)`
  static int w(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _w(
      _class.reference.pointer,
      _id_w as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_w$1 = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _w$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int w(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int w$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _w$1(
      _class.reference.pointer,
      _id_w$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_isLoggable = _class.staticMethodId(
    r'isLoggable',
    r'(Ljava/lang/String;I)Z',
  );

  static final _isLoggable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public native boolean isLoggable(java.lang.String string, int i)`
  static bool isLoggable(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isLoggable(
      _class.reference.pointer,
      _id_isLoggable as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).boolean;
  }

  static final _id_w$2 = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _w$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int w(java.lang.String string, java.lang.Throwable throwable)`
  static int w$2(jni$_.JString? string, jni$_.JObject? throwable) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _w$2(
      _class.reference.pointer,
      _id_w$2 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_e = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _e =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int e(java.lang.String string, java.lang.String string1)`
  static int e(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _e(
      _class.reference.pointer,
      _id_e as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_e$1 = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _e$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int e(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int e$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _e$1(
      _class.reference.pointer,
      _id_e$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_wtf = _class.staticMethodId(
    r'wtf',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _wtf =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int wtf(java.lang.String string, java.lang.String string1)`
  static int wtf(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _wtf(
      _class.reference.pointer,
      _id_wtf as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_wtf$1 = _class.staticMethodId(
    r'wtf',
    r'(Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _wtf$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int wtf(java.lang.String string, java.lang.Throwable throwable)`
  static int wtf$1(jni$_.JString? string, jni$_.JObject? throwable) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _wtf$1(
      _class.reference.pointer,
      _id_wtf$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_wtf$2 = _class.staticMethodId(
    r'wtf',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I',
  );

  static final _wtf$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int wtf(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static int wtf$2(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _wtf$2(
      _class.reference.pointer,
      _id_wtf$2 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$throwable.pointer,
    ).integer;
  }

  static final _id_getStackTraceString = _class.staticMethodId(
    r'getStackTraceString',
    r'(Ljava/lang/Throwable;)Ljava/lang/String;',
  );

  static final _getStackTraceString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.String getStackTraceString(java.lang.Throwable throwable)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getStackTraceString(jni$_.JObject? throwable) {
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    return _getStackTraceString(
      _class.reference.pointer,
      _id_getStackTraceString as jni$_.JMethodIDPtr,
      _$throwable.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_println = _class.staticMethodId(
    r'println',
    r'(ILjava/lang/String;Ljava/lang/String;)I',
  );

  static final _println =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int println(int i, java.lang.String string, java.lang.String string1)`
  static int println(int i, jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _println(
      _class.reference.pointer,
      _id_println as jni$_.JMethodIDPtr,
      i,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }
}

final class $Log$NullableType extends jni$_.JObjType<Log?> {
  @jni$_.internal
  const $Log$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/util/Log;';

  @jni$_.internal
  @core$_.override
  Log? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : Log.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Log?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Log$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Log$NullableType) &&
        other is $Log$NullableType;
  }
}

final class $Log$Type extends jni$_.JObjType<Log> {
  @jni$_.internal
  const $Log$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/util/Log;';

  @jni$_.internal
  @core$_.override
  Log fromReference(jni$_.JReference reference) => Log.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Log?> get nullableType => const $Log$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Log$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Log$Type) && other is $Log$Type;
  }
}
