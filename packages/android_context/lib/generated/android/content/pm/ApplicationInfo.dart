// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../Context.dart' as context_;

/// from: android.content.pm.ApplicationInfo$DisplayNameComparator
class ApplicationInfo_DisplayNameComparator extends jni.JObject {
  @override
  late final jni.JObjType<ApplicationInfo_DisplayNameComparator> $type = type;

  ApplicationInfo_DisplayNameComparator.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/ApplicationInfo$DisplayNameComparator');

  /// The type which includes information such as the signature of this class.
  static const type = $ApplicationInfo_DisplayNameComparatorType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/pm/PackageManager;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo_DisplayNameComparator(
    jni.JObject packageManager,
  ) {
    return ApplicationInfo_DisplayNameComparator.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .reference);
  }

  static final _id_compare = _class.instanceMethodId(
    r'compare',
    r'(Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ApplicationInfo;)I',
  );

  static final _compare = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final int compare(android.content.pm.ApplicationInfo applicationInfo, android.content.pm.ApplicationInfo applicationInfo1)
  int compare(
    ApplicationInfo applicationInfo,
    ApplicationInfo applicationInfo1,
  ) {
    return _compare(
            reference.pointer,
            _id_compare as jni.JMethodIDPtr,
            applicationInfo.reference.pointer,
            applicationInfo1.reference.pointer)
        .integer;
  }

  static final _id_compare1 = _class.instanceMethodId(
    r'compare',
    r'(Ljava/lang/Object;Ljava/lang/Object;)I',
  );

  static final _compare1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compare(java.lang.Object object, java.lang.Object object1)
  int compare1(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return _compare1(reference.pointer, _id_compare1 as jni.JMethodIDPtr,
            object.reference.pointer, object1.reference.pointer)
        .integer;
  }
}

final class $ApplicationInfo_DisplayNameComparatorType
    extends jni.JObjType<ApplicationInfo_DisplayNameComparator> {
  const $ApplicationInfo_DisplayNameComparatorType();

  @override
  String get signature =>
      r'Landroid/content/pm/ApplicationInfo$DisplayNameComparator;';

  @override
  ApplicationInfo_DisplayNameComparator fromReference(
          jni.JReference reference) =>
      ApplicationInfo_DisplayNameComparator.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ApplicationInfo_DisplayNameComparatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ApplicationInfo_DisplayNameComparatorType) &&
        other is $ApplicationInfo_DisplayNameComparatorType;
  }
}

/// from: android.content.pm.ApplicationInfo
class ApplicationInfo extends jni.JObject {
  @override
  late final jni.JObjType<ApplicationInfo> $type = type;

  ApplicationInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/ApplicationInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $ApplicationInfoType();

  /// from: static public final int CATEGORY_ACCESSIBILITY
  static const CATEGORY_ACCESSIBILITY = 8;

  /// from: static public final int CATEGORY_AUDIO
  static const CATEGORY_AUDIO = 1;

  /// from: static public final int CATEGORY_GAME
  static const CATEGORY_GAME = 0;

  /// from: static public final int CATEGORY_IMAGE
  static const CATEGORY_IMAGE = 3;

  /// from: static public final int CATEGORY_MAPS
  static const CATEGORY_MAPS = 6;

  /// from: static public final int CATEGORY_NEWS
  static const CATEGORY_NEWS = 5;

  /// from: static public final int CATEGORY_PRODUCTIVITY
  static const CATEGORY_PRODUCTIVITY = 7;

  /// from: static public final int CATEGORY_SOCIAL
  static const CATEGORY_SOCIAL = 4;

  /// from: static public final int CATEGORY_UNDEFINED
  static const CATEGORY_UNDEFINED = -1;

  /// from: static public final int CATEGORY_VIDEO
  static const CATEGORY_VIDEO = 2;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: static public final int FLAG_ALLOW_BACKUP
  static const FLAG_ALLOW_BACKUP = 32768;

  /// from: static public final int FLAG_ALLOW_CLEAR_USER_DATA
  static const FLAG_ALLOW_CLEAR_USER_DATA = 64;

  /// from: static public final int FLAG_ALLOW_TASK_REPARENTING
  static const FLAG_ALLOW_TASK_REPARENTING = 32;

  /// from: static public final int FLAG_DEBUGGABLE
  static const FLAG_DEBUGGABLE = 2;

  /// from: static public final int FLAG_EXTERNAL_STORAGE
  static const FLAG_EXTERNAL_STORAGE = 262144;

  /// from: static public final int FLAG_EXTRACT_NATIVE_LIBS
  static const FLAG_EXTRACT_NATIVE_LIBS = 268435456;

  /// from: static public final int FLAG_FACTORY_TEST
  static const FLAG_FACTORY_TEST = 16;

  /// from: static public final int FLAG_FULL_BACKUP_ONLY
  static const FLAG_FULL_BACKUP_ONLY = 67108864;

  /// from: static public final int FLAG_HARDWARE_ACCELERATED
  static const FLAG_HARDWARE_ACCELERATED = 536870912;

  /// from: static public final int FLAG_HAS_CODE
  static const FLAG_HAS_CODE = 4;

  /// from: static public final int FLAG_INSTALLED
  static const FLAG_INSTALLED = 8388608;

  /// from: static public final int FLAG_IS_DATA_ONLY
  static const FLAG_IS_DATA_ONLY = 16777216;

  /// from: static public final int FLAG_IS_GAME
  static const FLAG_IS_GAME = 33554432;

  /// from: static public final int FLAG_KILL_AFTER_RESTORE
  static const FLAG_KILL_AFTER_RESTORE = 65536;

  /// from: static public final int FLAG_LARGE_HEAP
  static const FLAG_LARGE_HEAP = 1048576;

  /// from: static public final int FLAG_MULTIARCH
  static const FLAG_MULTIARCH = -2147483648;

  /// from: static public final int FLAG_PERSISTENT
  static const FLAG_PERSISTENT = 8;

  /// from: static public final int FLAG_RESIZEABLE_FOR_SCREENS
  static const FLAG_RESIZEABLE_FOR_SCREENS = 4096;

  /// from: static public final int FLAG_RESTORE_ANY_VERSION
  static const FLAG_RESTORE_ANY_VERSION = 131072;

  /// from: static public final int FLAG_STOPPED
  static const FLAG_STOPPED = 2097152;

  /// from: static public final int FLAG_SUPPORTS_LARGE_SCREENS
  static const FLAG_SUPPORTS_LARGE_SCREENS = 2048;

  /// from: static public final int FLAG_SUPPORTS_NORMAL_SCREENS
  static const FLAG_SUPPORTS_NORMAL_SCREENS = 1024;

  /// from: static public final int FLAG_SUPPORTS_RTL
  static const FLAG_SUPPORTS_RTL = 4194304;

  /// from: static public final int FLAG_SUPPORTS_SCREEN_DENSITIES
  static const FLAG_SUPPORTS_SCREEN_DENSITIES = 8192;

  /// from: static public final int FLAG_SUPPORTS_SMALL_SCREENS
  static const FLAG_SUPPORTS_SMALL_SCREENS = 512;

  /// from: static public final int FLAG_SUPPORTS_XLARGE_SCREENS
  static const FLAG_SUPPORTS_XLARGE_SCREENS = 524288;

  /// from: static public final int FLAG_SUSPENDED
  static const FLAG_SUSPENDED = 1073741824;

  /// from: static public final int FLAG_SYSTEM
  static const FLAG_SYSTEM = 1;

  /// from: static public final int FLAG_TEST_ONLY
  static const FLAG_TEST_ONLY = 256;

  /// from: static public final int FLAG_UPDATED_SYSTEM_APP
  static const FLAG_UPDATED_SYSTEM_APP = 128;

  /// from: static public final int FLAG_USES_CLEARTEXT_TRAFFIC
  static const FLAG_USES_CLEARTEXT_TRAFFIC = 134217728;

  /// from: static public final int FLAG_VM_SAFE_MODE
  static const FLAG_VM_SAFE_MODE = 16384;

  /// from: static public final int GWP_ASAN_ALWAYS
  static const GWP_ASAN_ALWAYS = 1;

  /// from: static public final int GWP_ASAN_DEFAULT
  static const GWP_ASAN_DEFAULT = -1;

  /// from: static public final int GWP_ASAN_NEVER
  static const GWP_ASAN_NEVER = 0;

  /// from: static public final int MEMTAG_ASYNC
  static const MEMTAG_ASYNC = 1;

  /// from: static public final int MEMTAG_DEFAULT
  static const MEMTAG_DEFAULT = -1;

  /// from: static public final int MEMTAG_OFF
  static const MEMTAG_OFF = 0;

  /// from: static public final int MEMTAG_SYNC
  static const MEMTAG_SYNC = 2;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT
  static const RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT = 0;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED
  static const RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED = 2;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED
  static const RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED = 1;

  /// from: static public final int ZEROINIT_DEFAULT
  static const ZEROINIT_DEFAULT = -1;

  /// from: static public final int ZEROINIT_DISABLED
  static const ZEROINIT_DISABLED = 0;

  /// from: static public final int ZEROINIT_ENABLED
  static const ZEROINIT_ENABLED = 1;
  static final _id_appComponentFactory = _class.instanceFieldId(
    r'appComponentFactory',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String appComponentFactory
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get appComponentFactory =>
      _id_appComponentFactory.get(this, const jni.JStringType());

  /// from: public java.lang.String appComponentFactory
  /// The returned object must be released after use, by calling the [release] method.
  set appComponentFactory(jni.JString value) =>
      _id_appComponentFactory.set(this, const jni.JStringType(), value);

  static final _id_backupAgentName = _class.instanceFieldId(
    r'backupAgentName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String backupAgentName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get backupAgentName =>
      _id_backupAgentName.get(this, const jni.JStringType());

  /// from: public java.lang.String backupAgentName
  /// The returned object must be released after use, by calling the [release] method.
  set backupAgentName(jni.JString value) =>
      _id_backupAgentName.set(this, const jni.JStringType(), value);

  static final _id_category = _class.instanceFieldId(
    r'category',
    r'I',
  );

  /// from: public int category
  int get category => _id_category.get(this, const jni.jintType());

  /// from: public int category
  set category(int value) =>
      _id_category.set(this, const jni.jintType(), value);

  static final _id_className = _class.instanceFieldId(
    r'className',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String className
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get className => _id_className.get(this, const jni.JStringType());

  /// from: public java.lang.String className
  /// The returned object must be released after use, by calling the [release] method.
  set className(jni.JString value) =>
      _id_className.set(this, const jni.JStringType(), value);

  static final _id_compatibleWidthLimitDp = _class.instanceFieldId(
    r'compatibleWidthLimitDp',
    r'I',
  );

  /// from: public int compatibleWidthLimitDp
  int get compatibleWidthLimitDp =>
      _id_compatibleWidthLimitDp.get(this, const jni.jintType());

  /// from: public int compatibleWidthLimitDp
  set compatibleWidthLimitDp(int value) =>
      _id_compatibleWidthLimitDp.set(this, const jni.jintType(), value);

  static final _id_compileSdkVersion = _class.instanceFieldId(
    r'compileSdkVersion',
    r'I',
  );

  /// from: public int compileSdkVersion
  int get compileSdkVersion =>
      _id_compileSdkVersion.get(this, const jni.jintType());

  /// from: public int compileSdkVersion
  set compileSdkVersion(int value) =>
      _id_compileSdkVersion.set(this, const jni.jintType(), value);

  static final _id_compileSdkVersionCodename = _class.instanceFieldId(
    r'compileSdkVersionCodename',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String compileSdkVersionCodename
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get compileSdkVersionCodename =>
      _id_compileSdkVersionCodename.get(this, const jni.JStringType());

  /// from: public java.lang.String compileSdkVersionCodename
  /// The returned object must be released after use, by calling the [release] method.
  set compileSdkVersionCodename(jni.JString value) =>
      _id_compileSdkVersionCodename.set(this, const jni.JStringType(), value);

  static final _id_dataDir = _class.instanceFieldId(
    r'dataDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String dataDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get dataDir => _id_dataDir.get(this, const jni.JStringType());

  /// from: public java.lang.String dataDir
  /// The returned object must be released after use, by calling the [release] method.
  set dataDir(jni.JString value) =>
      _id_dataDir.set(this, const jni.JStringType(), value);

  static final _id_descriptionRes = _class.instanceFieldId(
    r'descriptionRes',
    r'I',
  );

  /// from: public int descriptionRes
  int get descriptionRes => _id_descriptionRes.get(this, const jni.jintType());

  /// from: public int descriptionRes
  set descriptionRes(int value) =>
      _id_descriptionRes.set(this, const jni.jintType(), value);

  static final _id_deviceProtectedDataDir = _class.instanceFieldId(
    r'deviceProtectedDataDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String deviceProtectedDataDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get deviceProtectedDataDir =>
      _id_deviceProtectedDataDir.get(this, const jni.JStringType());

  /// from: public java.lang.String deviceProtectedDataDir
  /// The returned object must be released after use, by calling the [release] method.
  set deviceProtectedDataDir(jni.JString value) =>
      _id_deviceProtectedDataDir.set(this, const jni.JStringType(), value);

  static final _id_enabled = _class.instanceFieldId(
    r'enabled',
    r'Z',
  );

  /// from: public boolean enabled
  bool get enabled => _id_enabled.get(this, const jni.jbooleanType());

  /// from: public boolean enabled
  set enabled(bool value) =>
      _id_enabled.set(this, const jni.jbooleanType(), value);

  static final _id_flags = _class.instanceFieldId(
    r'flags',
    r'I',
  );

  /// from: public int flags
  int get flags => _id_flags.get(this, const jni.jintType());

  /// from: public int flags
  set flags(int value) => _id_flags.set(this, const jni.jintType(), value);

  static final _id_largestWidthLimitDp = _class.instanceFieldId(
    r'largestWidthLimitDp',
    r'I',
  );

  /// from: public int largestWidthLimitDp
  int get largestWidthLimitDp =>
      _id_largestWidthLimitDp.get(this, const jni.jintType());

  /// from: public int largestWidthLimitDp
  set largestWidthLimitDp(int value) =>
      _id_largestWidthLimitDp.set(this, const jni.jintType(), value);

  static final _id_manageSpaceActivityName = _class.instanceFieldId(
    r'manageSpaceActivityName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String manageSpaceActivityName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get manageSpaceActivityName =>
      _id_manageSpaceActivityName.get(this, const jni.JStringType());

  /// from: public java.lang.String manageSpaceActivityName
  /// The returned object must be released after use, by calling the [release] method.
  set manageSpaceActivityName(jni.JString value) =>
      _id_manageSpaceActivityName.set(this, const jni.JStringType(), value);

  static final _id_minSdkVersion = _class.instanceFieldId(
    r'minSdkVersion',
    r'I',
  );

  /// from: public int minSdkVersion
  int get minSdkVersion => _id_minSdkVersion.get(this, const jni.jintType());

  /// from: public int minSdkVersion
  set minSdkVersion(int value) =>
      _id_minSdkVersion.set(this, const jni.jintType(), value);

  static final _id_nativeLibraryDir = _class.instanceFieldId(
    r'nativeLibraryDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String nativeLibraryDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get nativeLibraryDir =>
      _id_nativeLibraryDir.get(this, const jni.JStringType());

  /// from: public java.lang.String nativeLibraryDir
  /// The returned object must be released after use, by calling the [release] method.
  set nativeLibraryDir(jni.JString value) =>
      _id_nativeLibraryDir.set(this, const jni.JStringType(), value);

  static final _id_permission = _class.instanceFieldId(
    r'permission',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get permission =>
      _id_permission.get(this, const jni.JStringType());

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  set permission(jni.JString value) =>
      _id_permission.set(this, const jni.JStringType(), value);

  static final _id_processName = _class.instanceFieldId(
    r'processName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String processName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get processName =>
      _id_processName.get(this, const jni.JStringType());

  /// from: public java.lang.String processName
  /// The returned object must be released after use, by calling the [release] method.
  set processName(jni.JString value) =>
      _id_processName.set(this, const jni.JStringType(), value);

  static final _id_publicSourceDir = _class.instanceFieldId(
    r'publicSourceDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get publicSourceDir =>
      _id_publicSourceDir.get(this, const jni.JStringType());

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be released after use, by calling the [release] method.
  set publicSourceDir(jni.JString value) =>
      _id_publicSourceDir.set(this, const jni.JStringType(), value);

  static final _id_requiresSmallestWidthDp = _class.instanceFieldId(
    r'requiresSmallestWidthDp',
    r'I',
  );

  /// from: public int requiresSmallestWidthDp
  int get requiresSmallestWidthDp =>
      _id_requiresSmallestWidthDp.get(this, const jni.jintType());

  /// from: public int requiresSmallestWidthDp
  set requiresSmallestWidthDp(int value) =>
      _id_requiresSmallestWidthDp.set(this, const jni.jintType(), value);

  static final _id_sharedLibraryFiles = _class.instanceFieldId(
    r'sharedLibraryFiles',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] sharedLibraryFiles
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get sharedLibraryFiles =>
      _id_sharedLibraryFiles.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] sharedLibraryFiles
  /// The returned object must be released after use, by calling the [release] method.
  set sharedLibraryFiles(jni.JArray<jni.JString> value) =>
      _id_sharedLibraryFiles.set(
          this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_sourceDir = _class.instanceFieldId(
    r'sourceDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String sourceDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get sourceDir => _id_sourceDir.get(this, const jni.JStringType());

  /// from: public java.lang.String sourceDir
  /// The returned object must be released after use, by calling the [release] method.
  set sourceDir(jni.JString value) =>
      _id_sourceDir.set(this, const jni.JStringType(), value);

  static final _id_splitNames = _class.instanceFieldId(
    r'splitNames',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitNames =>
      _id_splitNames.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  set splitNames(jni.JArray<jni.JString> value) =>
      _id_splitNames.set(this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_splitPublicSourceDirs = _class.instanceFieldId(
    r'splitPublicSourceDirs',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitPublicSourceDirs => _id_splitPublicSourceDirs
      .get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  set splitPublicSourceDirs(jni.JArray<jni.JString> value) =>
      _id_splitPublicSourceDirs.set(
          this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_splitSourceDirs = _class.instanceFieldId(
    r'splitSourceDirs',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitSourceDirs =>
      _id_splitSourceDirs.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  set splitSourceDirs(jni.JArray<jni.JString> value) => _id_splitSourceDirs.set(
      this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_storageUuid = _class.instanceFieldId(
    r'storageUuid',
    r'Ljava/util/UUID;',
  );

  /// from: public java.util.UUID storageUuid
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get storageUuid =>
      _id_storageUuid.get(this, const jni.JObjectType());

  /// from: public java.util.UUID storageUuid
  /// The returned object must be released after use, by calling the [release] method.
  set storageUuid(jni.JObject value) =>
      _id_storageUuid.set(this, const jni.JObjectType(), value);

  static final _id_targetSdkVersion = _class.instanceFieldId(
    r'targetSdkVersion',
    r'I',
  );

  /// from: public int targetSdkVersion
  int get targetSdkVersion =>
      _id_targetSdkVersion.get(this, const jni.jintType());

  /// from: public int targetSdkVersion
  set targetSdkVersion(int value) =>
      _id_targetSdkVersion.set(this, const jni.jintType(), value);

  static final _id_taskAffinity = _class.instanceFieldId(
    r'taskAffinity',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get taskAffinity =>
      _id_taskAffinity.get(this, const jni.JStringType());

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  set taskAffinity(jni.JString value) =>
      _id_taskAffinity.set(this, const jni.JStringType(), value);

  static final _id_theme = _class.instanceFieldId(
    r'theme',
    r'I',
  );

  /// from: public int theme
  int get theme => _id_theme.get(this, const jni.jintType());

  /// from: public int theme
  set theme(int value) => _id_theme.set(this, const jni.jintType(), value);

  static final _id_uiOptions = _class.instanceFieldId(
    r'uiOptions',
    r'I',
  );

  /// from: public int uiOptions
  int get uiOptions => _id_uiOptions.get(this, const jni.jintType());

  /// from: public int uiOptions
  set uiOptions(int value) =>
      _id_uiOptions.set(this, const jni.jintType(), value);

  static final _id_uid = _class.instanceFieldId(
    r'uid',
    r'I',
  );

  /// from: public int uid
  int get uid => _id_uid.get(this, const jni.jintType());

  /// from: public int uid
  set uid(int value) => _id_uid.set(this, const jni.jintType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo() {
    return ApplicationInfo.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/pm/ApplicationInfo;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo.new1(
    ApplicationInfo applicationInfo,
  ) {
    return ApplicationInfo.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, applicationInfo.reference.pointer)
        .reference);
  }

  static final _id_getCategoryTitle = _class.staticMethodId(
    r'getCategoryTitle',
    r'(Landroid/content/Context;I)Ljava/lang/CharSequence;',
  );

  static final _getCategoryTitle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public java.lang.CharSequence getCategoryTitle(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getCategoryTitle(
    context_.Context context,
    int i,
  ) {
    return _getCategoryTitle(
            _class.reference.pointer,
            _id_getCategoryTitle as jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(android.util.Printer printer, java.lang.String string)
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dump(reference.pointer, _id_dump as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_loadDescription = _class.instanceMethodId(
    r'loadDescription',
    r'(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;',
  );

  static final _loadDescription = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadDescription(
    jni.JObject packageManager,
  ) {
    return _loadDescription(
            reference.pointer,
            _id_loadDescription as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getRequestRawExternalStorageAccess = _class.instanceMethodId(
    r'getRequestRawExternalStorageAccess',
    r'()I',
  );

  static final _getRequestRawExternalStorageAccess =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getRequestRawExternalStorageAccess()
  int getRequestRawExternalStorageAccess() {
    return _getRequestRawExternalStorageAccess(reference.pointer,
            _id_getRequestRawExternalStorageAccess as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isVirtualPreload = _class.instanceMethodId(
    r'isVirtualPreload',
    r'()Z',
  );

  static final _isVirtualPreload = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVirtualPreload()
  bool isVirtualPreload() {
    return _isVirtualPreload(
            reference.pointer, _id_isVirtualPreload as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isProfileableByShell = _class.instanceMethodId(
    r'isProfileableByShell',
    r'()Z',
  );

  static final _isProfileableByShell = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isProfileableByShell()
  bool isProfileableByShell() {
    return _isProfileableByShell(
            reference.pointer, _id_isProfileableByShell as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isProfileable = _class.instanceMethodId(
    r'isProfileable',
    r'()Z',
  );

  static final _isProfileable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isProfileable()
  bool isProfileable() {
    return _isProfileable(
            reference.pointer, _id_isProfileable as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_areAttributionsUserVisible = _class.instanceMethodId(
    r'areAttributionsUserVisible',
    r'()Z',
  );

  static final _areAttributionsUserVisible = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean areAttributionsUserVisible()
  bool areAttributionsUserVisible() {
    return _areAttributionsUserVisible(reference.pointer,
            _id_areAttributionsUserVisible as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isResourceOverlay = _class.instanceMethodId(
    r'isResourceOverlay',
    r'()Z',
  );

  static final _isResourceOverlay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isResourceOverlay()
  bool isResourceOverlay() {
    return _isResourceOverlay(
            reference.pointer, _id_isResourceOverlay as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getGwpAsanMode = _class.instanceMethodId(
    r'getGwpAsanMode',
    r'()I',
  );

  static final _getGwpAsanMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getGwpAsanMode()
  int getGwpAsanMode() {
    return _getGwpAsanMode(
            reference.pointer, _id_getGwpAsanMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMemtagMode = _class.instanceMethodId(
    r'getMemtagMode',
    r'()I',
  );

  static final _getMemtagMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getMemtagMode()
  int getMemtagMode() {
    return _getMemtagMode(
            reference.pointer, _id_getMemtagMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getNativeHeapZeroInitialized = _class.instanceMethodId(
    r'getNativeHeapZeroInitialized',
    r'()I',
  );

  static final _getNativeHeapZeroInitialized = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getNativeHeapZeroInitialized()
  int getNativeHeapZeroInitialized() {
    return _getNativeHeapZeroInitialized(reference.pointer,
            _id_getNativeHeapZeroInitialized as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getKnownActivityEmbeddingCerts = _class.instanceMethodId(
    r'getKnownActivityEmbeddingCerts',
    r'()Ljava/util/Set;',
  );

  static final _getKnownActivityEmbeddingCerts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getKnownActivityEmbeddingCerts()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getKnownActivityEmbeddingCerts() {
    return _getKnownActivityEmbeddingCerts(reference.pointer,
            _id_getKnownActivityEmbeddingCerts as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }
}

final class $ApplicationInfoType extends jni.JObjType<ApplicationInfo> {
  const $ApplicationInfoType();

  @override
  String get signature => r'Landroid/content/pm/ApplicationInfo;';

  @override
  ApplicationInfo fromReference(jni.JReference reference) =>
      ApplicationInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ApplicationInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ApplicationInfoType) &&
        other is $ApplicationInfoType;
  }
}
