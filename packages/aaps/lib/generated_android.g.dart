// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: android.content.pm.PackageInfo
class PackageInfo extends jni.JObject {
  @override
  late final jni.JObjType<PackageInfo> $type = type;

  PackageInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/pm/PackageInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageInfoType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: static public final int INSTALL_LOCATION_AUTO
  static const INSTALL_LOCATION_AUTO = 0;

  /// from: static public final int INSTALL_LOCATION_INTERNAL_ONLY
  static const INSTALL_LOCATION_INTERNAL_ONLY = 1;

  /// from: static public final int INSTALL_LOCATION_PREFER_EXTERNAL
  static const INSTALL_LOCATION_PREFER_EXTERNAL = 2;

  /// from: static public final int REQUESTED_PERMISSION_GRANTED
  static const REQUESTED_PERMISSION_GRANTED = 2;

  /// from: static public final int REQUESTED_PERMISSION_IMPLICIT
  static const REQUESTED_PERMISSION_IMPLICIT = 4;

  /// from: static public final int REQUESTED_PERMISSION_NEVER_FOR_LOCATION
  static const REQUESTED_PERMISSION_NEVER_FOR_LOCATION = 65536;
  static final _id_activities = _class.instanceFieldId(
    r'activities',
    r'[Landroid/content/pm/ActivityInfo;',
  );

  /// from: public android.content.pm.ActivityInfo[] activities
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get activities =>
      _id_activities.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.ActivityInfo[] activities
  /// The returned object must be released after use, by calling the [release] method.
  set activities(jni.JArray<jni.JObject> value) =>
      _id_activities.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_applicationInfo = _class.instanceFieldId(
    r'applicationInfo',
    r'Landroid/content/pm/ApplicationInfo;',
  );

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be released after use, by calling the [release] method.
  ApplicationInfo get applicationInfo =>
      _id_applicationInfo.get(this, const $ApplicationInfoType());

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be released after use, by calling the [release] method.
  set applicationInfo(ApplicationInfo value) =>
      _id_applicationInfo.set(this, const $ApplicationInfoType(), value);

  static final _id_attributions = _class.instanceFieldId(
    r'attributions',
    r'[Landroid/content/pm/Attribution;',
  );

  /// from: public android.content.pm.Attribution[] attributions
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get attributions =>
      _id_attributions.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.Attribution[] attributions
  /// The returned object must be released after use, by calling the [release] method.
  set attributions(jni.JArray<jni.JObject> value) => _id_attributions.set(
      this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_baseRevisionCode = _class.instanceFieldId(
    r'baseRevisionCode',
    r'I',
  );

  /// from: public int baseRevisionCode
  int get baseRevisionCode =>
      _id_baseRevisionCode.get(this, const jni.jintType());

  /// from: public int baseRevisionCode
  set baseRevisionCode(int value) =>
      _id_baseRevisionCode.set(this, const jni.jintType(), value);

  static final _id_configPreferences = _class.instanceFieldId(
    r'configPreferences',
    r'[Landroid/content/pm/ConfigurationInfo;',
  );

  /// from: public android.content.pm.ConfigurationInfo[] configPreferences
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get configPreferences =>
      _id_configPreferences.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.ConfigurationInfo[] configPreferences
  /// The returned object must be released after use, by calling the [release] method.
  set configPreferences(jni.JArray<jni.JObject> value) => _id_configPreferences
      .set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_featureGroups = _class.instanceFieldId(
    r'featureGroups',
    r'[Landroid/content/pm/FeatureGroupInfo;',
  );

  /// from: public android.content.pm.FeatureGroupInfo[] featureGroups
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get featureGroups =>
      _id_featureGroups.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.FeatureGroupInfo[] featureGroups
  /// The returned object must be released after use, by calling the [release] method.
  set featureGroups(jni.JArray<jni.JObject> value) => _id_featureGroups.set(
      this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_firstInstallTime = _class.instanceFieldId(
    r'firstInstallTime',
    r'J',
  );

  /// from: public long firstInstallTime
  int get firstInstallTime =>
      _id_firstInstallTime.get(this, const jni.jlongType());

  /// from: public long firstInstallTime
  set firstInstallTime(int value) =>
      _id_firstInstallTime.set(this, const jni.jlongType(), value);

  static final _id_gids = _class.instanceFieldId(
    r'gids',
    r'[I',
  );

  /// from: public int[] gids
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> get gids =>
      _id_gids.get(this, const jni.JArrayType(jni.jintType()));

  /// from: public int[] gids
  /// The returned object must be released after use, by calling the [release] method.
  set gids(jni.JArray<jni.jint> value) =>
      _id_gids.set(this, const jni.JArrayType(jni.jintType()), value);

  static final _id_installLocation = _class.instanceFieldId(
    r'installLocation',
    r'I',
  );

  /// from: public int installLocation
  int get installLocation =>
      _id_installLocation.get(this, const jni.jintType());

  /// from: public int installLocation
  set installLocation(int value) =>
      _id_installLocation.set(this, const jni.jintType(), value);

  static final _id_instrumentation = _class.instanceFieldId(
    r'instrumentation',
    r'[Landroid/content/pm/InstrumentationInfo;',
  );

  /// from: public android.content.pm.InstrumentationInfo[] instrumentation
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get instrumentation =>
      _id_instrumentation.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.InstrumentationInfo[] instrumentation
  /// The returned object must be released after use, by calling the [release] method.
  set instrumentation(jni.JArray<jni.JObject> value) => _id_instrumentation.set(
      this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_isApex = _class.instanceFieldId(
    r'isApex',
    r'Z',
  );

  /// from: public boolean isApex
  bool get isApex => _id_isApex.get(this, const jni.jbooleanType());

  /// from: public boolean isApex
  set isApex(bool value) =>
      _id_isApex.set(this, const jni.jbooleanType(), value);

  static final _id_lastUpdateTime = _class.instanceFieldId(
    r'lastUpdateTime',
    r'J',
  );

  /// from: public long lastUpdateTime
  int get lastUpdateTime => _id_lastUpdateTime.get(this, const jni.jlongType());

  /// from: public long lastUpdateTime
  set lastUpdateTime(int value) =>
      _id_lastUpdateTime.set(this, const jni.jlongType(), value);

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      _id_packageName.get(this, const jni.JStringType());

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      _id_packageName.set(this, const jni.JStringType(), value);

  static final _id_permissions = _class.instanceFieldId(
    r'permissions',
    r'[Landroid/content/pm/PermissionInfo;',
  );

  /// from: public android.content.pm.PermissionInfo[] permissions
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get permissions =>
      _id_permissions.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.PermissionInfo[] permissions
  /// The returned object must be released after use, by calling the [release] method.
  set permissions(jni.JArray<jni.JObject> value) =>
      _id_permissions.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_providers = _class.instanceFieldId(
    r'providers',
    r'[Landroid/content/pm/ProviderInfo;',
  );

  /// from: public android.content.pm.ProviderInfo[] providers
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get providers =>
      _id_providers.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.ProviderInfo[] providers
  /// The returned object must be released after use, by calling the [release] method.
  set providers(jni.JArray<jni.JObject> value) =>
      _id_providers.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_receivers = _class.instanceFieldId(
    r'receivers',
    r'[Landroid/content/pm/ActivityInfo;',
  );

  /// from: public android.content.pm.ActivityInfo[] receivers
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get receivers =>
      _id_receivers.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.ActivityInfo[] receivers
  /// The returned object must be released after use, by calling the [release] method.
  set receivers(jni.JArray<jni.JObject> value) =>
      _id_receivers.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_reqFeatures = _class.instanceFieldId(
    r'reqFeatures',
    r'[Landroid/content/pm/FeatureInfo;',
  );

  /// from: public android.content.pm.FeatureInfo[] reqFeatures
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get reqFeatures =>
      _id_reqFeatures.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.FeatureInfo[] reqFeatures
  /// The returned object must be released after use, by calling the [release] method.
  set reqFeatures(jni.JArray<jni.JObject> value) =>
      _id_reqFeatures.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_requestedPermissions = _class.instanceFieldId(
    r'requestedPermissions',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] requestedPermissions
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get requestedPermissions => _id_requestedPermissions
      .get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] requestedPermissions
  /// The returned object must be released after use, by calling the [release] method.
  set requestedPermissions(jni.JArray<jni.JString> value) =>
      _id_requestedPermissions.set(
          this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_requestedPermissionsFlags = _class.instanceFieldId(
    r'requestedPermissionsFlags',
    r'[I',
  );

  /// from: public int[] requestedPermissionsFlags
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> get requestedPermissionsFlags =>
      _id_requestedPermissionsFlags.get(
          this, const jni.JArrayType(jni.jintType()));

  /// from: public int[] requestedPermissionsFlags
  /// The returned object must be released after use, by calling the [release] method.
  set requestedPermissionsFlags(jni.JArray<jni.jint> value) =>
      _id_requestedPermissionsFlags.set(
          this, const jni.JArrayType(jni.jintType()), value);

  static final _id_services = _class.instanceFieldId(
    r'services',
    r'[Landroid/content/pm/ServiceInfo;',
  );

  /// from: public android.content.pm.ServiceInfo[] services
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get services =>
      _id_services.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.ServiceInfo[] services
  /// The returned object must be released after use, by calling the [release] method.
  set services(jni.JArray<jni.JObject> value) =>
      _id_services.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_sharedUserId = _class.instanceFieldId(
    r'sharedUserId',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String sharedUserId
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get sharedUserId =>
      _id_sharedUserId.get(this, const jni.JStringType());

  /// from: public java.lang.String sharedUserId
  /// The returned object must be released after use, by calling the [release] method.
  set sharedUserId(jni.JString value) =>
      _id_sharedUserId.set(this, const jni.JStringType(), value);

  static final _id_sharedUserLabel = _class.instanceFieldId(
    r'sharedUserLabel',
    r'I',
  );

  /// from: public int sharedUserLabel
  int get sharedUserLabel =>
      _id_sharedUserLabel.get(this, const jni.jintType());

  /// from: public int sharedUserLabel
  set sharedUserLabel(int value) =>
      _id_sharedUserLabel.set(this, const jni.jintType(), value);

  static final _id_signatures = _class.instanceFieldId(
    r'signatures',
    r'[Landroid/content/pm/Signature;',
  );

  /// from: public android.content.pm.Signature[] signatures
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> get signatures =>
      _id_signatures.get(this, const jni.JArrayType(jni.JObjectType()));

  /// from: public android.content.pm.Signature[] signatures
  /// The returned object must be released after use, by calling the [release] method.
  set signatures(jni.JArray<jni.JObject> value) =>
      _id_signatures.set(this, const jni.JArrayType(jni.JObjectType()), value);

  static final _id_signingInfo = _class.instanceFieldId(
    r'signingInfo',
    r'Landroid/content/pm/SigningInfo;',
  );

  /// from: public android.content.pm.SigningInfo signingInfo
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get signingInfo =>
      _id_signingInfo.get(this, const jni.JObjectType());

  /// from: public android.content.pm.SigningInfo signingInfo
  /// The returned object must be released after use, by calling the [release] method.
  set signingInfo(jni.JObject value) =>
      _id_signingInfo.set(this, const jni.JObjectType(), value);

  static final _id_splitNames = _class.instanceFieldId(
    r'splitNames',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitNames =>
      _id_splitNames.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  set splitNames(jni.JArray<jni.JString> value) =>
      _id_splitNames.set(this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_splitRevisionCodes = _class.instanceFieldId(
    r'splitRevisionCodes',
    r'[I',
  );

  /// from: public int[] splitRevisionCodes
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> get splitRevisionCodes =>
      _id_splitRevisionCodes.get(this, const jni.JArrayType(jni.jintType()));

  /// from: public int[] splitRevisionCodes
  /// The returned object must be released after use, by calling the [release] method.
  set splitRevisionCodes(jni.JArray<jni.jint> value) => _id_splitRevisionCodes
      .set(this, const jni.JArrayType(jni.jintType()), value);

  static final _id_versionCode = _class.instanceFieldId(
    r'versionCode',
    r'I',
  );

  /// from: public int versionCode
  int get versionCode => _id_versionCode.get(this, const jni.jintType());

  /// from: public int versionCode
  set versionCode(int value) =>
      _id_versionCode.set(this, const jni.jintType(), value);

  static final _id_versionName = _class.instanceFieldId(
    r'versionName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String versionName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get versionName =>
      _id_versionName.get(this, const jni.JStringType());

  /// from: public java.lang.String versionName
  /// The returned object must be released after use, by calling the [release] method.
  set versionName(jni.JString value) =>
      _id_versionName.set(this, const jni.JStringType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageInfo() {
    return PackageInfo.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getLongVersionCode = _class.instanceMethodId(
    r'getLongVersionCode',
    r'()J',
  );

  static final _getLongVersionCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getLongVersionCode()
  int getLongVersionCode() {
    return _getLongVersionCode(
            reference.pointer, _id_getLongVersionCode as jni.JMethodIDPtr)
        .long;
  }

  static final _id_setLongVersionCode = _class.instanceMethodId(
    r'setLongVersionCode',
    r'(J)V',
  );

  static final _setLongVersionCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setLongVersionCode(long j)
  void setLongVersionCode(
    int j,
  ) {
    _setLongVersionCode(
            reference.pointer, _id_setLongVersionCode as jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $PackageInfoType extends jni.JObjType<PackageInfo> {
  const $PackageInfoType();

  @override
  String get signature => r'Landroid/content/pm/PackageInfo;';

  @override
  PackageInfo fromReference(jni.JReference reference) =>
      PackageInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageInfoType) && other is $PackageInfoType;
  }
}

/// from: android.content.pm.PackageItemInfo$DisplayNameComparator
class PackageItemInfo_DisplayNameComparator extends jni.JObject {
  @override
  late final jni.JObjType<PackageItemInfo_DisplayNameComparator> $type = type;

  PackageItemInfo_DisplayNameComparator.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageItemInfo$DisplayNameComparator');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageItemInfo_DisplayNameComparatorType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/pm/PackageManager;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo_DisplayNameComparator(
    PackageManager packageManager,
  ) {
    return PackageItemInfo_DisplayNameComparator.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .reference);
  }

  static final _id_compare = _class.instanceMethodId(
    r'compare',
    r'(Landroid/content/pm/PackageItemInfo;Landroid/content/pm/PackageItemInfo;)I',
  );

  static final _compare = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final int compare(android.content.pm.PackageItemInfo packageItemInfo, android.content.pm.PackageItemInfo packageItemInfo1)
  int compare(
    PackageItemInfo packageItemInfo,
    PackageItemInfo packageItemInfo1,
  ) {
    return _compare(
            reference.pointer,
            _id_compare as jni.JMethodIDPtr,
            packageItemInfo.reference.pointer,
            packageItemInfo1.reference.pointer)
        .integer;
  }

  static final _id_compare1 = _class.instanceMethodId(
    r'compare',
    r'(Ljava/lang/Object;Ljava/lang/Object;)I',
  );

  static final _compare1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compare(java.lang.Object object, java.lang.Object object1)
  int compare1(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return _compare1(reference.pointer, _id_compare1 as jni.JMethodIDPtr,
            object.reference.pointer, object1.reference.pointer)
        .integer;
  }
}

final class $PackageItemInfo_DisplayNameComparatorType
    extends jni.JObjType<PackageItemInfo_DisplayNameComparator> {
  const $PackageItemInfo_DisplayNameComparatorType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageItemInfo$DisplayNameComparator;';

  @override
  PackageItemInfo_DisplayNameComparator fromReference(
          jni.JReference reference) =>
      PackageItemInfo_DisplayNameComparator.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageItemInfo_DisplayNameComparatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageItemInfo_DisplayNameComparatorType) &&
        other is $PackageItemInfo_DisplayNameComparatorType;
  }
}

/// from: android.content.pm.PackageItemInfo
class PackageItemInfo extends jni.JObject {
  @override
  late final jni.JObjType<PackageItemInfo> $type = type;

  PackageItemInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/PackageItemInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageItemInfoType();
  static final _id_banner = _class.instanceFieldId(
    r'banner',
    r'I',
  );

  /// from: public int banner
  int get banner => _id_banner.get(this, const jni.jintType());

  /// from: public int banner
  set banner(int value) => _id_banner.set(this, const jni.jintType(), value);

  static final _id_icon = _class.instanceFieldId(
    r'icon',
    r'I',
  );

  /// from: public int icon
  int get icon => _id_icon.get(this, const jni.jintType());

  /// from: public int icon
  set icon(int value) => _id_icon.set(this, const jni.jintType(), value);

  static final _id_labelRes = _class.instanceFieldId(
    r'labelRes',
    r'I',
  );

  /// from: public int labelRes
  int get labelRes => _id_labelRes.get(this, const jni.jintType());

  /// from: public int labelRes
  set labelRes(int value) =>
      _id_labelRes.set(this, const jni.jintType(), value);

  static final _id_logo = _class.instanceFieldId(
    r'logo',
    r'I',
  );

  /// from: public int logo
  int get logo => _id_logo.get(this, const jni.jintType());

  /// from: public int logo
  set logo(int value) => _id_logo.set(this, const jni.jintType(), value);

  static final _id_metaData = _class.instanceFieldId(
    r'metaData',
    r'Landroid/os/Bundle;',
  );

  /// from: public android.os.Bundle metaData
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get metaData => _id_metaData.get(this, const jni.JObjectType());

  /// from: public android.os.Bundle metaData
  /// The returned object must be released after use, by calling the [release] method.
  set metaData(jni.JObject value) =>
      _id_metaData.set(this, const jni.JObjectType(), value);

  static final _id_name = _class.instanceFieldId(
    r'name',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String name
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get name => _id_name.get(this, const jni.JStringType());

  /// from: public java.lang.String name
  /// The returned object must be released after use, by calling the [release] method.
  set name(jni.JString value) =>
      _id_name.set(this, const jni.JStringType(), value);

  static final _id_nonLocalizedLabel = _class.instanceFieldId(
    r'nonLocalizedLabel',
    r'Ljava/lang/CharSequence;',
  );

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get nonLocalizedLabel =>
      _id_nonLocalizedLabel.get(this, const jni.JObjectType());

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be released after use, by calling the [release] method.
  set nonLocalizedLabel(jni.JObject value) =>
      _id_nonLocalizedLabel.set(this, const jni.JObjectType(), value);

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      _id_packageName.get(this, const jni.JStringType());

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      _id_packageName.set(this, const jni.JStringType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo() {
    return PackageItemInfo.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/pm/PackageItemInfo;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.PackageItemInfo packageItemInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo.new1(
    PackageItemInfo packageItemInfo,
  ) {
    return PackageItemInfo.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, packageItemInfo.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/os/Parcel;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void <init>(android.os.Parcel parcel)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageItemInfo.new2(
    jni.JObject parcel,
  ) {
    return PackageItemInfo.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, parcel.reference.pointer)
        .reference);
  }

  static final _id_loadLabel = _class.instanceMethodId(
    r'loadLabel',
    r'(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;',
  );

  static final _loadLabel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadLabel(
    PackageManager packageManager,
  ) {
    return _loadLabel(reference.pointer, _id_loadLabel as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_loadIcon = _class.instanceMethodId(
    r'loadIcon',
    r'(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;',
  );

  static final _loadIcon = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadIcon(
    PackageManager packageManager,
  ) {
    return _loadIcon(reference.pointer, _id_loadIcon as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_loadUnbadgedIcon = _class.instanceMethodId(
    r'loadUnbadgedIcon',
    r'(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;',
  );

  static final _loadUnbadgedIcon = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadUnbadgedIcon(
    PackageManager packageManager,
  ) {
    return _loadUnbadgedIcon(
            reference.pointer,
            _id_loadUnbadgedIcon as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_loadBanner = _class.instanceMethodId(
    r'loadBanner',
    r'(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;',
  );

  static final _loadBanner = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadBanner(
    PackageManager packageManager,
  ) {
    return _loadBanner(reference.pointer, _id_loadBanner as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_loadLogo = _class.instanceMethodId(
    r'loadLogo',
    r'(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;',
  );

  static final _loadLogo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadLogo(
    PackageManager packageManager,
  ) {
    return _loadLogo(reference.pointer, _id_loadLogo as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_loadXmlMetaData = _class.instanceMethodId(
    r'loadXmlMetaData',
    r'(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;',
  );

  static final _loadXmlMetaData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager packageManager, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadXmlMetaData(
    PackageManager packageManager,
    jni.JString string,
  ) {
    return _loadXmlMetaData(
            reference.pointer,
            _id_loadXmlMetaData as jni.JMethodIDPtr,
            packageManager.reference.pointer,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_dumpFront = _class.instanceMethodId(
    r'dumpFront',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dumpFront = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void dumpFront(android.util.Printer printer, java.lang.String string)
  void dumpFront(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dumpFront(reference.pointer, _id_dumpFront as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_dumpBack = _class.instanceMethodId(
    r'dumpBack',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dumpBack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void dumpBack(android.util.Printer printer, java.lang.String string)
  void dumpBack(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dumpBack(reference.pointer, _id_dumpBack as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $PackageItemInfoType extends jni.JObjType<PackageItemInfo> {
  const $PackageItemInfoType();

  @override
  String get signature => r'Landroid/content/pm/PackageItemInfo;';

  @override
  PackageItemInfo fromReference(jni.JReference reference) =>
      PackageItemInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageItemInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageItemInfoType) &&
        other is $PackageItemInfoType;
  }
}

/// from: android.content.pm.ApplicationInfo$DisplayNameComparator
class ApplicationInfo_DisplayNameComparator extends jni.JObject {
  @override
  late final jni.JObjType<ApplicationInfo_DisplayNameComparator> $type = type;

  ApplicationInfo_DisplayNameComparator.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/ApplicationInfo$DisplayNameComparator');

  /// The type which includes information such as the signature of this class.
  static const type = $ApplicationInfo_DisplayNameComparatorType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/pm/PackageManager;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo_DisplayNameComparator(
    PackageManager packageManager,
  ) {
    return ApplicationInfo_DisplayNameComparator.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .reference);
  }

  static final _id_compare = _class.instanceMethodId(
    r'compare',
    r'(Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ApplicationInfo;)I',
  );

  static final _compare = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final int compare(android.content.pm.ApplicationInfo applicationInfo, android.content.pm.ApplicationInfo applicationInfo1)
  int compare(
    ApplicationInfo applicationInfo,
    ApplicationInfo applicationInfo1,
  ) {
    return _compare(
            reference.pointer,
            _id_compare as jni.JMethodIDPtr,
            applicationInfo.reference.pointer,
            applicationInfo1.reference.pointer)
        .integer;
  }

  static final _id_compare1 = _class.instanceMethodId(
    r'compare',
    r'(Ljava/lang/Object;Ljava/lang/Object;)I',
  );

  static final _compare1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compare(java.lang.Object object, java.lang.Object object1)
  int compare1(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return _compare1(reference.pointer, _id_compare1 as jni.JMethodIDPtr,
            object.reference.pointer, object1.reference.pointer)
        .integer;
  }
}

final class $ApplicationInfo_DisplayNameComparatorType
    extends jni.JObjType<ApplicationInfo_DisplayNameComparator> {
  const $ApplicationInfo_DisplayNameComparatorType();

  @override
  String get signature =>
      r'Landroid/content/pm/ApplicationInfo$DisplayNameComparator;';

  @override
  ApplicationInfo_DisplayNameComparator fromReference(
          jni.JReference reference) =>
      ApplicationInfo_DisplayNameComparator.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ApplicationInfo_DisplayNameComparatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ApplicationInfo_DisplayNameComparatorType) &&
        other is $ApplicationInfo_DisplayNameComparatorType;
  }
}

/// from: android.content.pm.ApplicationInfo
class ApplicationInfo extends PackageItemInfo {
  @override
  late final jni.JObjType<ApplicationInfo> $type = type;

  ApplicationInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/ApplicationInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $ApplicationInfoType();

  /// from: static public final int CATEGORY_ACCESSIBILITY
  static const CATEGORY_ACCESSIBILITY = 8;

  /// from: static public final int CATEGORY_AUDIO
  static const CATEGORY_AUDIO = 1;

  /// from: static public final int CATEGORY_GAME
  static const CATEGORY_GAME = 0;

  /// from: static public final int CATEGORY_IMAGE
  static const CATEGORY_IMAGE = 3;

  /// from: static public final int CATEGORY_MAPS
  static const CATEGORY_MAPS = 6;

  /// from: static public final int CATEGORY_NEWS
  static const CATEGORY_NEWS = 5;

  /// from: static public final int CATEGORY_PRODUCTIVITY
  static const CATEGORY_PRODUCTIVITY = 7;

  /// from: static public final int CATEGORY_SOCIAL
  static const CATEGORY_SOCIAL = 4;

  /// from: static public final int CATEGORY_UNDEFINED
  static const CATEGORY_UNDEFINED = -1;

  /// from: static public final int CATEGORY_VIDEO
  static const CATEGORY_VIDEO = 2;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: static public final int FLAG_ALLOW_BACKUP
  static const FLAG_ALLOW_BACKUP = 32768;

  /// from: static public final int FLAG_ALLOW_CLEAR_USER_DATA
  static const FLAG_ALLOW_CLEAR_USER_DATA = 64;

  /// from: static public final int FLAG_ALLOW_TASK_REPARENTING
  static const FLAG_ALLOW_TASK_REPARENTING = 32;

  /// from: static public final int FLAG_DEBUGGABLE
  static const FLAG_DEBUGGABLE = 2;

  /// from: static public final int FLAG_EXTERNAL_STORAGE
  static const FLAG_EXTERNAL_STORAGE = 262144;

  /// from: static public final int FLAG_EXTRACT_NATIVE_LIBS
  static const FLAG_EXTRACT_NATIVE_LIBS = 268435456;

  /// from: static public final int FLAG_FACTORY_TEST
  static const FLAG_FACTORY_TEST = 16;

  /// from: static public final int FLAG_FULL_BACKUP_ONLY
  static const FLAG_FULL_BACKUP_ONLY = 67108864;

  /// from: static public final int FLAG_HARDWARE_ACCELERATED
  static const FLAG_HARDWARE_ACCELERATED = 536870912;

  /// from: static public final int FLAG_HAS_CODE
  static const FLAG_HAS_CODE = 4;

  /// from: static public final int FLAG_INSTALLED
  static const FLAG_INSTALLED = 8388608;

  /// from: static public final int FLAG_IS_DATA_ONLY
  static const FLAG_IS_DATA_ONLY = 16777216;

  /// from: static public final int FLAG_IS_GAME
  static const FLAG_IS_GAME = 33554432;

  /// from: static public final int FLAG_KILL_AFTER_RESTORE
  static const FLAG_KILL_AFTER_RESTORE = 65536;

  /// from: static public final int FLAG_LARGE_HEAP
  static const FLAG_LARGE_HEAP = 1048576;

  /// from: static public final int FLAG_MULTIARCH
  static const FLAG_MULTIARCH = -2147483648;

  /// from: static public final int FLAG_PERSISTENT
  static const FLAG_PERSISTENT = 8;

  /// from: static public final int FLAG_RESIZEABLE_FOR_SCREENS
  static const FLAG_RESIZEABLE_FOR_SCREENS = 4096;

  /// from: static public final int FLAG_RESTORE_ANY_VERSION
  static const FLAG_RESTORE_ANY_VERSION = 131072;

  /// from: static public final int FLAG_STOPPED
  static const FLAG_STOPPED = 2097152;

  /// from: static public final int FLAG_SUPPORTS_LARGE_SCREENS
  static const FLAG_SUPPORTS_LARGE_SCREENS = 2048;

  /// from: static public final int FLAG_SUPPORTS_NORMAL_SCREENS
  static const FLAG_SUPPORTS_NORMAL_SCREENS = 1024;

  /// from: static public final int FLAG_SUPPORTS_RTL
  static const FLAG_SUPPORTS_RTL = 4194304;

  /// from: static public final int FLAG_SUPPORTS_SCREEN_DENSITIES
  static const FLAG_SUPPORTS_SCREEN_DENSITIES = 8192;

  /// from: static public final int FLAG_SUPPORTS_SMALL_SCREENS
  static const FLAG_SUPPORTS_SMALL_SCREENS = 512;

  /// from: static public final int FLAG_SUPPORTS_XLARGE_SCREENS
  static const FLAG_SUPPORTS_XLARGE_SCREENS = 524288;

  /// from: static public final int FLAG_SUSPENDED
  static const FLAG_SUSPENDED = 1073741824;

  /// from: static public final int FLAG_SYSTEM
  static const FLAG_SYSTEM = 1;

  /// from: static public final int FLAG_TEST_ONLY
  static const FLAG_TEST_ONLY = 256;

  /// from: static public final int FLAG_UPDATED_SYSTEM_APP
  static const FLAG_UPDATED_SYSTEM_APP = 128;

  /// from: static public final int FLAG_USES_CLEARTEXT_TRAFFIC
  static const FLAG_USES_CLEARTEXT_TRAFFIC = 134217728;

  /// from: static public final int FLAG_VM_SAFE_MODE
  static const FLAG_VM_SAFE_MODE = 16384;

  /// from: static public final int GWP_ASAN_ALWAYS
  static const GWP_ASAN_ALWAYS = 1;

  /// from: static public final int GWP_ASAN_DEFAULT
  static const GWP_ASAN_DEFAULT = -1;

  /// from: static public final int GWP_ASAN_NEVER
  static const GWP_ASAN_NEVER = 0;

  /// from: static public final int MEMTAG_ASYNC
  static const MEMTAG_ASYNC = 1;

  /// from: static public final int MEMTAG_DEFAULT
  static const MEMTAG_DEFAULT = -1;

  /// from: static public final int MEMTAG_OFF
  static const MEMTAG_OFF = 0;

  /// from: static public final int MEMTAG_SYNC
  static const MEMTAG_SYNC = 2;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT
  static const RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT = 0;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED
  static const RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED = 2;

  /// from: static public final int RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED
  static const RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED = 1;

  /// from: static public final int ZEROINIT_DEFAULT
  static const ZEROINIT_DEFAULT = -1;

  /// from: static public final int ZEROINIT_DISABLED
  static const ZEROINIT_DISABLED = 0;

  /// from: static public final int ZEROINIT_ENABLED
  static const ZEROINIT_ENABLED = 1;
  static final _id_appComponentFactory = _class.instanceFieldId(
    r'appComponentFactory',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String appComponentFactory
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get appComponentFactory =>
      _id_appComponentFactory.get(this, const jni.JStringType());

  /// from: public java.lang.String appComponentFactory
  /// The returned object must be released after use, by calling the [release] method.
  set appComponentFactory(jni.JString value) =>
      _id_appComponentFactory.set(this, const jni.JStringType(), value);

  static final _id_backupAgentName = _class.instanceFieldId(
    r'backupAgentName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String backupAgentName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get backupAgentName =>
      _id_backupAgentName.get(this, const jni.JStringType());

  /// from: public java.lang.String backupAgentName
  /// The returned object must be released after use, by calling the [release] method.
  set backupAgentName(jni.JString value) =>
      _id_backupAgentName.set(this, const jni.JStringType(), value);

  static final _id_category = _class.instanceFieldId(
    r'category',
    r'I',
  );

  /// from: public int category
  int get category => _id_category.get(this, const jni.jintType());

  /// from: public int category
  set category(int value) =>
      _id_category.set(this, const jni.jintType(), value);

  static final _id_className = _class.instanceFieldId(
    r'className',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String className
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get className => _id_className.get(this, const jni.JStringType());

  /// from: public java.lang.String className
  /// The returned object must be released after use, by calling the [release] method.
  set className(jni.JString value) =>
      _id_className.set(this, const jni.JStringType(), value);

  static final _id_compatibleWidthLimitDp = _class.instanceFieldId(
    r'compatibleWidthLimitDp',
    r'I',
  );

  /// from: public int compatibleWidthLimitDp
  int get compatibleWidthLimitDp =>
      _id_compatibleWidthLimitDp.get(this, const jni.jintType());

  /// from: public int compatibleWidthLimitDp
  set compatibleWidthLimitDp(int value) =>
      _id_compatibleWidthLimitDp.set(this, const jni.jintType(), value);

  static final _id_compileSdkVersion = _class.instanceFieldId(
    r'compileSdkVersion',
    r'I',
  );

  /// from: public int compileSdkVersion
  int get compileSdkVersion =>
      _id_compileSdkVersion.get(this, const jni.jintType());

  /// from: public int compileSdkVersion
  set compileSdkVersion(int value) =>
      _id_compileSdkVersion.set(this, const jni.jintType(), value);

  static final _id_compileSdkVersionCodename = _class.instanceFieldId(
    r'compileSdkVersionCodename',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String compileSdkVersionCodename
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get compileSdkVersionCodename =>
      _id_compileSdkVersionCodename.get(this, const jni.JStringType());

  /// from: public java.lang.String compileSdkVersionCodename
  /// The returned object must be released after use, by calling the [release] method.
  set compileSdkVersionCodename(jni.JString value) =>
      _id_compileSdkVersionCodename.set(this, const jni.JStringType(), value);

  static final _id_dataDir = _class.instanceFieldId(
    r'dataDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String dataDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get dataDir => _id_dataDir.get(this, const jni.JStringType());

  /// from: public java.lang.String dataDir
  /// The returned object must be released after use, by calling the [release] method.
  set dataDir(jni.JString value) =>
      _id_dataDir.set(this, const jni.JStringType(), value);

  static final _id_descriptionRes = _class.instanceFieldId(
    r'descriptionRes',
    r'I',
  );

  /// from: public int descriptionRes
  int get descriptionRes => _id_descriptionRes.get(this, const jni.jintType());

  /// from: public int descriptionRes
  set descriptionRes(int value) =>
      _id_descriptionRes.set(this, const jni.jintType(), value);

  static final _id_deviceProtectedDataDir = _class.instanceFieldId(
    r'deviceProtectedDataDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String deviceProtectedDataDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get deviceProtectedDataDir =>
      _id_deviceProtectedDataDir.get(this, const jni.JStringType());

  /// from: public java.lang.String deviceProtectedDataDir
  /// The returned object must be released after use, by calling the [release] method.
  set deviceProtectedDataDir(jni.JString value) =>
      _id_deviceProtectedDataDir.set(this, const jni.JStringType(), value);

  static final _id_enabled = _class.instanceFieldId(
    r'enabled',
    r'Z',
  );

  /// from: public boolean enabled
  bool get enabled => _id_enabled.get(this, const jni.jbooleanType());

  /// from: public boolean enabled
  set enabled(bool value) =>
      _id_enabled.set(this, const jni.jbooleanType(), value);

  static final _id_flags = _class.instanceFieldId(
    r'flags',
    r'I',
  );

  /// from: public int flags
  int get flags => _id_flags.get(this, const jni.jintType());

  /// from: public int flags
  set flags(int value) => _id_flags.set(this, const jni.jintType(), value);

  static final _id_largestWidthLimitDp = _class.instanceFieldId(
    r'largestWidthLimitDp',
    r'I',
  );

  /// from: public int largestWidthLimitDp
  int get largestWidthLimitDp =>
      _id_largestWidthLimitDp.get(this, const jni.jintType());

  /// from: public int largestWidthLimitDp
  set largestWidthLimitDp(int value) =>
      _id_largestWidthLimitDp.set(this, const jni.jintType(), value);

  static final _id_manageSpaceActivityName = _class.instanceFieldId(
    r'manageSpaceActivityName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String manageSpaceActivityName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get manageSpaceActivityName =>
      _id_manageSpaceActivityName.get(this, const jni.JStringType());

  /// from: public java.lang.String manageSpaceActivityName
  /// The returned object must be released after use, by calling the [release] method.
  set manageSpaceActivityName(jni.JString value) =>
      _id_manageSpaceActivityName.set(this, const jni.JStringType(), value);

  static final _id_minSdkVersion = _class.instanceFieldId(
    r'minSdkVersion',
    r'I',
  );

  /// from: public int minSdkVersion
  int get minSdkVersion => _id_minSdkVersion.get(this, const jni.jintType());

  /// from: public int minSdkVersion
  set minSdkVersion(int value) =>
      _id_minSdkVersion.set(this, const jni.jintType(), value);

  static final _id_nativeLibraryDir = _class.instanceFieldId(
    r'nativeLibraryDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String nativeLibraryDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get nativeLibraryDir =>
      _id_nativeLibraryDir.get(this, const jni.JStringType());

  /// from: public java.lang.String nativeLibraryDir
  /// The returned object must be released after use, by calling the [release] method.
  set nativeLibraryDir(jni.JString value) =>
      _id_nativeLibraryDir.set(this, const jni.JStringType(), value);

  static final _id_permission = _class.instanceFieldId(
    r'permission',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get permission =>
      _id_permission.get(this, const jni.JStringType());

  /// from: public java.lang.String permission
  /// The returned object must be released after use, by calling the [release] method.
  set permission(jni.JString value) =>
      _id_permission.set(this, const jni.JStringType(), value);

  static final _id_processName = _class.instanceFieldId(
    r'processName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String processName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get processName =>
      _id_processName.get(this, const jni.JStringType());

  /// from: public java.lang.String processName
  /// The returned object must be released after use, by calling the [release] method.
  set processName(jni.JString value) =>
      _id_processName.set(this, const jni.JStringType(), value);

  static final _id_publicSourceDir = _class.instanceFieldId(
    r'publicSourceDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get publicSourceDir =>
      _id_publicSourceDir.get(this, const jni.JStringType());

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be released after use, by calling the [release] method.
  set publicSourceDir(jni.JString value) =>
      _id_publicSourceDir.set(this, const jni.JStringType(), value);

  static final _id_requiresSmallestWidthDp = _class.instanceFieldId(
    r'requiresSmallestWidthDp',
    r'I',
  );

  /// from: public int requiresSmallestWidthDp
  int get requiresSmallestWidthDp =>
      _id_requiresSmallestWidthDp.get(this, const jni.jintType());

  /// from: public int requiresSmallestWidthDp
  set requiresSmallestWidthDp(int value) =>
      _id_requiresSmallestWidthDp.set(this, const jni.jintType(), value);

  static final _id_sharedLibraryFiles = _class.instanceFieldId(
    r'sharedLibraryFiles',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] sharedLibraryFiles
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get sharedLibraryFiles =>
      _id_sharedLibraryFiles.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] sharedLibraryFiles
  /// The returned object must be released after use, by calling the [release] method.
  set sharedLibraryFiles(jni.JArray<jni.JString> value) =>
      _id_sharedLibraryFiles.set(
          this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_sourceDir = _class.instanceFieldId(
    r'sourceDir',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String sourceDir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get sourceDir => _id_sourceDir.get(this, const jni.JStringType());

  /// from: public java.lang.String sourceDir
  /// The returned object must be released after use, by calling the [release] method.
  set sourceDir(jni.JString value) =>
      _id_sourceDir.set(this, const jni.JStringType(), value);

  static final _id_splitNames = _class.instanceFieldId(
    r'splitNames',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitNames =>
      _id_splitNames.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitNames
  /// The returned object must be released after use, by calling the [release] method.
  set splitNames(jni.JArray<jni.JString> value) =>
      _id_splitNames.set(this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_splitPublicSourceDirs = _class.instanceFieldId(
    r'splitPublicSourceDirs',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitPublicSourceDirs => _id_splitPublicSourceDirs
      .get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  set splitPublicSourceDirs(jni.JArray<jni.JString> value) =>
      _id_splitPublicSourceDirs.set(
          this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_splitSourceDirs = _class.instanceFieldId(
    r'splitSourceDirs',
    r'[Ljava/lang/String;',
  );

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> get splitSourceDirs =>
      _id_splitSourceDirs.get(this, const jni.JArrayType(jni.JStringType()));

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be released after use, by calling the [release] method.
  set splitSourceDirs(jni.JArray<jni.JString> value) => _id_splitSourceDirs.set(
      this, const jni.JArrayType(jni.JStringType()), value);

  static final _id_storageUuid = _class.instanceFieldId(
    r'storageUuid',
    r'Ljava/util/UUID;',
  );

  /// from: public java.util.UUID storageUuid
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get storageUuid =>
      _id_storageUuid.get(this, const jni.JObjectType());

  /// from: public java.util.UUID storageUuid
  /// The returned object must be released after use, by calling the [release] method.
  set storageUuid(jni.JObject value) =>
      _id_storageUuid.set(this, const jni.JObjectType(), value);

  static final _id_targetSdkVersion = _class.instanceFieldId(
    r'targetSdkVersion',
    r'I',
  );

  /// from: public int targetSdkVersion
  int get targetSdkVersion =>
      _id_targetSdkVersion.get(this, const jni.jintType());

  /// from: public int targetSdkVersion
  set targetSdkVersion(int value) =>
      _id_targetSdkVersion.set(this, const jni.jintType(), value);

  static final _id_taskAffinity = _class.instanceFieldId(
    r'taskAffinity',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get taskAffinity =>
      _id_taskAffinity.get(this, const jni.JStringType());

  /// from: public java.lang.String taskAffinity
  /// The returned object must be released after use, by calling the [release] method.
  set taskAffinity(jni.JString value) =>
      _id_taskAffinity.set(this, const jni.JStringType(), value);

  static final _id_theme = _class.instanceFieldId(
    r'theme',
    r'I',
  );

  /// from: public int theme
  int get theme => _id_theme.get(this, const jni.jintType());

  /// from: public int theme
  set theme(int value) => _id_theme.set(this, const jni.jintType(), value);

  static final _id_uiOptions = _class.instanceFieldId(
    r'uiOptions',
    r'I',
  );

  /// from: public int uiOptions
  int get uiOptions => _id_uiOptions.get(this, const jni.jintType());

  /// from: public int uiOptions
  set uiOptions(int value) =>
      _id_uiOptions.set(this, const jni.jintType(), value);

  static final _id_uid = _class.instanceFieldId(
    r'uid',
    r'I',
  );

  /// from: public int uid
  int get uid => _id_uid.get(this, const jni.jintType());

  /// from: public int uid
  set uid(int value) => _id_uid.set(this, const jni.jintType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo() {
    return ApplicationInfo.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Landroid/content/pm/ApplicationInfo;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  factory ApplicationInfo.new3(
    ApplicationInfo applicationInfo,
  ) {
    return ApplicationInfo.fromReference(_new3(_class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr, applicationInfo.reference.pointer)
        .reference);
  }

  static final _id_getCategoryTitle = _class.staticMethodId(
    r'getCategoryTitle',
    r'(Landroid/content/Context;I)Ljava/lang/CharSequence;',
  );

  static final _getCategoryTitle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public java.lang.CharSequence getCategoryTitle(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getCategoryTitle(
    Context context,
    int i,
  ) {
    return _getCategoryTitle(
            _class.reference.pointer,
            _id_getCategoryTitle as jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(android.util.Printer printer, java.lang.String string)
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dump(reference.pointer, _id_dump as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_loadDescription = _class.instanceMethodId(
    r'loadDescription',
    r'(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;',
  );

  static final _loadDescription = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadDescription(
    PackageManager packageManager,
  ) {
    return _loadDescription(
            reference.pointer,
            _id_loadDescription as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getRequestRawExternalStorageAccess = _class.instanceMethodId(
    r'getRequestRawExternalStorageAccess',
    r'()I',
  );

  static final _getRequestRawExternalStorageAccess =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getRequestRawExternalStorageAccess()
  int getRequestRawExternalStorageAccess() {
    return _getRequestRawExternalStorageAccess(reference.pointer,
            _id_getRequestRawExternalStorageAccess as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isVirtualPreload = _class.instanceMethodId(
    r'isVirtualPreload',
    r'()Z',
  );

  static final _isVirtualPreload = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVirtualPreload()
  bool isVirtualPreload() {
    return _isVirtualPreload(
            reference.pointer, _id_isVirtualPreload as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isProfileableByShell = _class.instanceMethodId(
    r'isProfileableByShell',
    r'()Z',
  );

  static final _isProfileableByShell = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isProfileableByShell()
  bool isProfileableByShell() {
    return _isProfileableByShell(
            reference.pointer, _id_isProfileableByShell as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isProfileable = _class.instanceMethodId(
    r'isProfileable',
    r'()Z',
  );

  static final _isProfileable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isProfileable()
  bool isProfileable() {
    return _isProfileable(
            reference.pointer, _id_isProfileable as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_areAttributionsUserVisible = _class.instanceMethodId(
    r'areAttributionsUserVisible',
    r'()Z',
  );

  static final _areAttributionsUserVisible = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean areAttributionsUserVisible()
  bool areAttributionsUserVisible() {
    return _areAttributionsUserVisible(reference.pointer,
            _id_areAttributionsUserVisible as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isResourceOverlay = _class.instanceMethodId(
    r'isResourceOverlay',
    r'()Z',
  );

  static final _isResourceOverlay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isResourceOverlay()
  bool isResourceOverlay() {
    return _isResourceOverlay(
            reference.pointer, _id_isResourceOverlay as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getGwpAsanMode = _class.instanceMethodId(
    r'getGwpAsanMode',
    r'()I',
  );

  static final _getGwpAsanMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getGwpAsanMode()
  int getGwpAsanMode() {
    return _getGwpAsanMode(
            reference.pointer, _id_getGwpAsanMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMemtagMode = _class.instanceMethodId(
    r'getMemtagMode',
    r'()I',
  );

  static final _getMemtagMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getMemtagMode()
  int getMemtagMode() {
    return _getMemtagMode(
            reference.pointer, _id_getMemtagMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getNativeHeapZeroInitialized = _class.instanceMethodId(
    r'getNativeHeapZeroInitialized',
    r'()I',
  );

  static final _getNativeHeapZeroInitialized = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getNativeHeapZeroInitialized()
  int getNativeHeapZeroInitialized() {
    return _getNativeHeapZeroInitialized(reference.pointer,
            _id_getNativeHeapZeroInitialized as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getKnownActivityEmbeddingCerts = _class.instanceMethodId(
    r'getKnownActivityEmbeddingCerts',
    r'()Ljava/util/Set;',
  );

  static final _getKnownActivityEmbeddingCerts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getKnownActivityEmbeddingCerts()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getKnownActivityEmbeddingCerts() {
    return _getKnownActivityEmbeddingCerts(reference.pointer,
            _id_getKnownActivityEmbeddingCerts as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }
}

final class $ApplicationInfoType extends jni.JObjType<ApplicationInfo> {
  const $ApplicationInfoType();

  @override
  String get signature => r'Landroid/content/pm/ApplicationInfo;';

  @override
  ApplicationInfo fromReference(jni.JReference reference) =>
      ApplicationInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const $PackageItemInfoType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ApplicationInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ApplicationInfoType) &&
        other is $ApplicationInfoType;
  }
}

/// from: android.content.pm.PackageManager$ApplicationInfoFlags
class PackageManager_ApplicationInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ApplicationInfoFlags> $type = type;

  PackageManager_ApplicationInfoFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageManager$ApplicationInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ApplicationInfoFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ApplicationInfoFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.pm.PackageManager$ApplicationInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ApplicationInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $PackageManager_ApplicationInfoFlagsType());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getValue()
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr).long;
  }
}

final class $PackageManager_ApplicationInfoFlagsType
    extends jni.JObjType<PackageManager_ApplicationInfoFlags> {
  const $PackageManager_ApplicationInfoFlagsType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ApplicationInfoFlags;';

  @override
  PackageManager_ApplicationInfoFlags fromReference(jni.JReference reference) =>
      PackageManager_ApplicationInfoFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ApplicationInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ApplicationInfoFlagsType) &&
        other is $PackageManager_ApplicationInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$ComponentEnabledSetting
class PackageManager_ComponentEnabledSetting extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ComponentEnabledSetting> $type = type;

  PackageManager_ComponentEnabledSetting.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageManager$ComponentEnabledSetting');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentEnabledSettingType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/ComponentName;II)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void <init>(android.content.ComponentName componentName, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_ComponentEnabledSetting(
    jni.JObject componentName,
    int i,
    int i1,
  ) {
    return PackageManager_ComponentEnabledSetting.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getEnabledState = _class.instanceMethodId(
    r'getEnabledState',
    r'()I',
  );

  static final _getEnabledState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getEnabledState()
  int getEnabledState() {
    return _getEnabledState(
            reference.pointer, _id_getEnabledState as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getEnabledFlags = _class.instanceMethodId(
    r'getEnabledFlags',
    r'()I',
  );

  static final _getEnabledFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getEnabledFlags()
  int getEnabledFlags() {
    return _getEnabledFlags(
            reference.pointer, _id_getEnabledFlags as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }
}

final class $PackageManager_ComponentEnabledSettingType
    extends jni.JObjType<PackageManager_ComponentEnabledSetting> {
  const $PackageManager_ComponentEnabledSettingType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ComponentEnabledSetting;';

  @override
  PackageManager_ComponentEnabledSetting fromReference(
          jni.JReference reference) =>
      PackageManager_ComponentEnabledSetting.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ComponentEnabledSettingType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ComponentEnabledSettingType) &&
        other is $PackageManager_ComponentEnabledSettingType;
  }
}

/// from: android.content.pm.PackageManager$ComponentInfoFlags
class PackageManager_ComponentInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ComponentInfoFlags> $type = type;

  PackageManager_ComponentInfoFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageManager$ComponentInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentInfoFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ComponentInfoFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.pm.PackageManager$ComponentInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ComponentInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $PackageManager_ComponentInfoFlagsType());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getValue()
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr).long;
  }
}

final class $PackageManager_ComponentInfoFlagsType
    extends jni.JObjType<PackageManager_ComponentInfoFlags> {
  const $PackageManager_ComponentInfoFlagsType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ComponentInfoFlags;';

  @override
  PackageManager_ComponentInfoFlags fromReference(jni.JReference reference) =>
      PackageManager_ComponentInfoFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ComponentInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ComponentInfoFlagsType) &&
        other is $PackageManager_ComponentInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$NameNotFoundException
class PackageManager_NameNotFoundException extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_NameNotFoundException> $type = type;

  PackageManager_NameNotFoundException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageManager$NameNotFoundException');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_NameNotFoundExceptionType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException() {
    return PackageManager_NameNotFoundException.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException.new1(
    jni.JString string,
  ) {
    return PackageManager_NameNotFoundException.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .reference);
  }
}

final class $PackageManager_NameNotFoundExceptionType
    extends jni.JObjType<PackageManager_NameNotFoundException> {
  const $PackageManager_NameNotFoundExceptionType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$NameNotFoundException;';

  @override
  PackageManager_NameNotFoundException fromReference(
          jni.JReference reference) =>
      PackageManager_NameNotFoundException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_NameNotFoundExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_NameNotFoundExceptionType) &&
        other is $PackageManager_NameNotFoundExceptionType;
  }
}

/// from: android.content.pm.PackageManager$OnChecksumsReadyListener
class PackageManager_OnChecksumsReadyListener extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_OnChecksumsReadyListener> $type = type;

  PackageManager_OnChecksumsReadyListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/pm/PackageManager$OnChecksumsReadyListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_OnChecksumsReadyListenerType();
  static final _id_onChecksumsReady = _class.instanceMethodId(
    r'onChecksumsReady',
    r'(Ljava/util/List;)V',
  );

  static final _onChecksumsReady = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onChecksumsReady(java.util.List list)
  void onChecksumsReady(
    jni.JList<jni.JObject> list,
  ) {
    _onChecksumsReady(reference.pointer,
            _id_onChecksumsReady as jni.JMethodIDPtr, list.reference.pointer)
        .check();
  }
}

final class $PackageManager_OnChecksumsReadyListenerType
    extends jni.JObjType<PackageManager_OnChecksumsReadyListener> {
  const $PackageManager_OnChecksumsReadyListenerType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$OnChecksumsReadyListener;';

  @override
  PackageManager_OnChecksumsReadyListener fromReference(
          jni.JReference reference) =>
      PackageManager_OnChecksumsReadyListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_OnChecksumsReadyListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PackageManager_OnChecksumsReadyListenerType) &&
        other is $PackageManager_OnChecksumsReadyListenerType;
  }
}

/// from: android.content.pm.PackageManager$PackageInfoFlags
class PackageManager_PackageInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_PackageInfoFlags> $type = type;

  PackageManager_PackageInfoFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/PackageManager$PackageInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_PackageInfoFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$PackageInfoFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.pm.PackageManager$PackageInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_PackageInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $PackageManager_PackageInfoFlagsType());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getValue()
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr).long;
  }
}

final class $PackageManager_PackageInfoFlagsType
    extends jni.JObjType<PackageManager_PackageInfoFlags> {
  const $PackageManager_PackageInfoFlagsType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$PackageInfoFlags;';

  @override
  PackageManager_PackageInfoFlags fromReference(jni.JReference reference) =>
      PackageManager_PackageInfoFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_PackageInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_PackageInfoFlagsType) &&
        other is $PackageManager_PackageInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager$Property
class PackageManager_Property extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_Property> $type = type;

  PackageManager_Property.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/PackageManager$Property');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_PropertyType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getName() {
    return _getName(reference.pointer, _id_getName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getClassName = _class.instanceMethodId(
    r'getClassName',
    r'()Ljava/lang/String;',
  );

  static final _getClassName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getClassName() {
    return _getClassName(
            reference.pointer, _id_getClassName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getBoolean = _class.instanceMethodId(
    r'getBoolean',
    r'()Z',
  );

  static final _getBoolean = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean getBoolean()
  bool getBoolean() {
    return _getBoolean(reference.pointer, _id_getBoolean as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isBoolean = _class.instanceMethodId(
    r'isBoolean',
    r'()Z',
  );

  static final _isBoolean = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isBoolean()
  bool isBoolean() {
    return _isBoolean(reference.pointer, _id_isBoolean as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getFloat = _class.instanceMethodId(
    r'getFloat',
    r'()F',
  );

  static final _getFloat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public float getFloat()
  double getFloat() {
    return _getFloat(reference.pointer, _id_getFloat as jni.JMethodIDPtr).float;
  }

  static final _id_isFloat = _class.instanceMethodId(
    r'isFloat',
    r'()Z',
  );

  static final _isFloat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isFloat()
  bool isFloat() {
    return _isFloat(reference.pointer, _id_isFloat as jni.JMethodIDPtr).boolean;
  }

  static final _id_getInteger = _class.instanceMethodId(
    r'getInteger',
    r'()I',
  );

  static final _getInteger = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getInteger()
  int getInteger() {
    return _getInteger(reference.pointer, _id_getInteger as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isInteger = _class.instanceMethodId(
    r'isInteger',
    r'()Z',
  );

  static final _isInteger = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInteger()
  bool isInteger() {
    return _isInteger(reference.pointer, _id_isInteger as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getResourceId = _class.instanceMethodId(
    r'getResourceId',
    r'()I',
  );

  static final _getResourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getResourceId()
  int getResourceId() {
    return _getResourceId(
            reference.pointer, _id_getResourceId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isResourceId = _class.instanceMethodId(
    r'isResourceId',
    r'()Z',
  );

  static final _isResourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isResourceId()
  bool isResourceId() {
    return _isResourceId(
            reference.pointer, _id_isResourceId as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'()Ljava/lang/String;',
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString() {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_isString = _class.instanceMethodId(
    r'isString',
    r'()Z',
  );

  static final _isString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isString()
  bool isString() {
    return _isString(reference.pointer, _id_isString as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $PackageManager_PropertyType
    extends jni.JObjType<PackageManager_Property> {
  const $PackageManager_PropertyType();

  @override
  String get signature => r'Landroid/content/pm/PackageManager$Property;';

  @override
  PackageManager_Property fromReference(jni.JReference reference) =>
      PackageManager_Property.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_PropertyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_PropertyType) &&
        other is $PackageManager_PropertyType;
  }
}

/// from: android.content.pm.PackageManager$ResolveInfoFlags
class PackageManager_ResolveInfoFlags extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager_ResolveInfoFlags> $type = type;

  PackageManager_ResolveInfoFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/PackageManager$ResolveInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ResolveInfoFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ResolveInfoFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.pm.PackageManager$ResolveInfoFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ResolveInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $PackageManager_ResolveInfoFlagsType());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getValue()
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr).long;
  }
}

final class $PackageManager_ResolveInfoFlagsType
    extends jni.JObjType<PackageManager_ResolveInfoFlags> {
  const $PackageManager_ResolveInfoFlagsType();

  @override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ResolveInfoFlags;';

  @override
  PackageManager_ResolveInfoFlags fromReference(jni.JReference reference) =>
      PackageManager_ResolveInfoFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManager_ResolveInfoFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ResolveInfoFlagsType) &&
        other is $PackageManager_ResolveInfoFlagsType;
  }
}

/// from: android.content.pm.PackageManager
class PackageManager extends jni.JObject {
  @override
  late final jni.JObjType<PackageManager> $type = type;

  PackageManager.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/pm/PackageManager');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManagerType();

  /// from: static public final int CERT_INPUT_RAW_X509
  static const CERT_INPUT_RAW_X509 = 0;

  /// from: static public final int CERT_INPUT_SHA256
  static const CERT_INPUT_SHA256 = 1;

  /// from: static public final int COMPONENT_ENABLED_STATE_DEFAULT
  static const COMPONENT_ENABLED_STATE_DEFAULT = 0;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED
  static const COMPONENT_ENABLED_STATE_DISABLED = 2;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
  static const COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED = 4;

  /// from: static public final int COMPONENT_ENABLED_STATE_DISABLED_USER
  static const COMPONENT_ENABLED_STATE_DISABLED_USER = 3;

  /// from: static public final int COMPONENT_ENABLED_STATE_ENABLED
  static const COMPONENT_ENABLED_STATE_ENABLED = 1;

  /// from: static public final int DONT_KILL_APP
  static const DONT_KILL_APP = 1;
  static final _id_EXTRA_VERIFICATION_ID = _class.staticFieldId(
    r'EXTRA_VERIFICATION_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_VERIFICATION_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VERIFICATION_ID =>
      _id_EXTRA_VERIFICATION_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_VERIFICATION_RESULT = _class.staticFieldId(
    r'EXTRA_VERIFICATION_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_VERIFICATION_RESULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VERIFICATION_RESULT =>
      _id_EXTRA_VERIFICATION_RESULT.get(_class, const jni.JStringType());

  static final _id_FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS =
      _class.staticFieldId(
    r'FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS =>
      _id_FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_APP_WIDGETS = _class.staticFieldId(
    r'FEATURE_APP_WIDGETS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_APP_WIDGETS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_APP_WIDGETS =>
      _id_FEATURE_APP_WIDGETS.get(_class, const jni.JStringType());

  static final _id_FEATURE_AUDIO_LOW_LATENCY = _class.staticFieldId(
    r'FEATURE_AUDIO_LOW_LATENCY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_AUDIO_LOW_LATENCY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_AUDIO_LOW_LATENCY =>
      _id_FEATURE_AUDIO_LOW_LATENCY.get(_class, const jni.JStringType());

  static final _id_FEATURE_AUDIO_OUTPUT = _class.staticFieldId(
    r'FEATURE_AUDIO_OUTPUT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_AUDIO_OUTPUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_AUDIO_OUTPUT =>
      _id_FEATURE_AUDIO_OUTPUT.get(_class, const jni.JStringType());

  static final _id_FEATURE_AUDIO_PRO = _class.staticFieldId(
    r'FEATURE_AUDIO_PRO',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_AUDIO_PRO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_AUDIO_PRO =>
      _id_FEATURE_AUDIO_PRO.get(_class, const jni.JStringType());

  static final _id_FEATURE_AUTOFILL = _class.staticFieldId(
    r'FEATURE_AUTOFILL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_AUTOFILL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_AUTOFILL =>
      _id_FEATURE_AUTOFILL.get(_class, const jni.JStringType());

  static final _id_FEATURE_AUTOMOTIVE = _class.staticFieldId(
    r'FEATURE_AUTOMOTIVE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_AUTOMOTIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_AUTOMOTIVE =>
      _id_FEATURE_AUTOMOTIVE.get(_class, const jni.JStringType());

  static final _id_FEATURE_BACKUP = _class.staticFieldId(
    r'FEATURE_BACKUP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_BACKUP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_BACKUP =>
      _id_FEATURE_BACKUP.get(_class, const jni.JStringType());

  static final _id_FEATURE_BLUETOOTH = _class.staticFieldId(
    r'FEATURE_BLUETOOTH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_BLUETOOTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_BLUETOOTH =>
      _id_FEATURE_BLUETOOTH.get(_class, const jni.JStringType());

  static final _id_FEATURE_BLUETOOTH_LE = _class.staticFieldId(
    r'FEATURE_BLUETOOTH_LE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_BLUETOOTH_LE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_BLUETOOTH_LE =>
      _id_FEATURE_BLUETOOTH_LE.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA = _class.staticFieldId(
    r'FEATURE_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA =>
      _id_FEATURE_CAMERA.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_ANY = _class.staticFieldId(
    r'FEATURE_CAMERA_ANY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_ANY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_ANY =>
      _id_FEATURE_CAMERA_ANY.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_AR = _class.staticFieldId(
    r'FEATURE_CAMERA_AR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_AR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_AR =>
      _id_FEATURE_CAMERA_AR.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_AUTOFOCUS = _class.staticFieldId(
    r'FEATURE_CAMERA_AUTOFOCUS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_AUTOFOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_AUTOFOCUS =>
      _id_FEATURE_CAMERA_AUTOFOCUS.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING =
      _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING =>
      _id_FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR =
      _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR =>
      _id_FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_RAW = _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_RAW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_CAPABILITY_RAW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_CAPABILITY_RAW =>
      _id_FEATURE_CAMERA_CAPABILITY_RAW.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_CONCURRENT = _class.staticFieldId(
    r'FEATURE_CAMERA_CONCURRENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_CONCURRENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_CONCURRENT =>
      _id_FEATURE_CAMERA_CONCURRENT.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_EXTERNAL = _class.staticFieldId(
    r'FEATURE_CAMERA_EXTERNAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_EXTERNAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_EXTERNAL =>
      _id_FEATURE_CAMERA_EXTERNAL.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_FLASH = _class.staticFieldId(
    r'FEATURE_CAMERA_FLASH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_FLASH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_FLASH =>
      _id_FEATURE_CAMERA_FLASH.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_FRONT = _class.staticFieldId(
    r'FEATURE_CAMERA_FRONT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_FRONT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_FRONT =>
      _id_FEATURE_CAMERA_FRONT.get(_class, const jni.JStringType());

  static final _id_FEATURE_CAMERA_LEVEL_FULL = _class.staticFieldId(
    r'FEATURE_CAMERA_LEVEL_FULL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CAMERA_LEVEL_FULL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CAMERA_LEVEL_FULL =>
      _id_FEATURE_CAMERA_LEVEL_FULL.get(_class, const jni.JStringType());

  static final _id_FEATURE_CANT_SAVE_STATE = _class.staticFieldId(
    r'FEATURE_CANT_SAVE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CANT_SAVE_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CANT_SAVE_STATE =>
      _id_FEATURE_CANT_SAVE_STATE.get(_class, const jni.JStringType());

  static final _id_FEATURE_COMPANION_DEVICE_SETUP = _class.staticFieldId(
    r'FEATURE_COMPANION_DEVICE_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_COMPANION_DEVICE_SETUP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_COMPANION_DEVICE_SETUP =>
      _id_FEATURE_COMPANION_DEVICE_SETUP.get(_class, const jni.JStringType());

  static final _id_FEATURE_CONNECTION_SERVICE = _class.staticFieldId(
    r'FEATURE_CONNECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CONNECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CONNECTION_SERVICE =>
      _id_FEATURE_CONNECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_FEATURE_CONSUMER_IR = _class.staticFieldId(
    r'FEATURE_CONSUMER_IR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CONSUMER_IR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CONSUMER_IR =>
      _id_FEATURE_CONSUMER_IR.get(_class, const jni.JStringType());

  static final _id_FEATURE_CONTROLS = _class.staticFieldId(
    r'FEATURE_CONTROLS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CONTROLS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CONTROLS =>
      _id_FEATURE_CONTROLS.get(_class, const jni.JStringType());

  static final _id_FEATURE_CREDENTIALS = _class.staticFieldId(
    r'FEATURE_CREDENTIALS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_CREDENTIALS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_CREDENTIALS =>
      _id_FEATURE_CREDENTIALS.get(_class, const jni.JStringType());

  static final _id_FEATURE_DEVICE_ADMIN = _class.staticFieldId(
    r'FEATURE_DEVICE_ADMIN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_DEVICE_ADMIN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_DEVICE_ADMIN =>
      _id_FEATURE_DEVICE_ADMIN.get(_class, const jni.JStringType());

  static final _id_FEATURE_DEVICE_LOCK = _class.staticFieldId(
    r'FEATURE_DEVICE_LOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_DEVICE_LOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_DEVICE_LOCK =>
      _id_FEATURE_DEVICE_LOCK.get(_class, const jni.JStringType());

  static final _id_FEATURE_EMBEDDED = _class.staticFieldId(
    r'FEATURE_EMBEDDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_EMBEDDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_EMBEDDED =>
      _id_FEATURE_EMBEDDED.get(_class, const jni.JStringType());

  static final _id_FEATURE_ETHERNET = _class.staticFieldId(
    r'FEATURE_ETHERNET',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_ETHERNET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_ETHERNET =>
      _id_FEATURE_ETHERNET.get(_class, const jni.JStringType());

  static final _id_FEATURE_EXPANDED_PICTURE_IN_PICTURE = _class.staticFieldId(
    r'FEATURE_EXPANDED_PICTURE_IN_PICTURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_EXPANDED_PICTURE_IN_PICTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_EXPANDED_PICTURE_IN_PICTURE =>
      _id_FEATURE_EXPANDED_PICTURE_IN_PICTURE.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_FACE = _class.staticFieldId(
    r'FEATURE_FACE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FACE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FACE =>
      _id_FEATURE_FACE.get(_class, const jni.JStringType());

  static final _id_FEATURE_FAKETOUCH = _class.staticFieldId(
    r'FEATURE_FAKETOUCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FAKETOUCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FAKETOUCH =>
      _id_FEATURE_FAKETOUCH.get(_class, const jni.JStringType());

  static final _id_FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT = _class.staticFieldId(
    r'FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT =>
      _id_FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND = _class.staticFieldId(
    r'FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND =>
      _id_FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_FINGERPRINT = _class.staticFieldId(
    r'FEATURE_FINGERPRINT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FINGERPRINT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FINGERPRINT =>
      _id_FEATURE_FINGERPRINT.get(_class, const jni.JStringType());

  static final _id_FEATURE_FREEFORM_WINDOW_MANAGEMENT = _class.staticFieldId(
    r'FEATURE_FREEFORM_WINDOW_MANAGEMENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_FREEFORM_WINDOW_MANAGEMENT =>
      _id_FEATURE_FREEFORM_WINDOW_MANAGEMENT.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_GAMEPAD = _class.staticFieldId(
    r'FEATURE_GAMEPAD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_GAMEPAD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_GAMEPAD =>
      _id_FEATURE_GAMEPAD.get(_class, const jni.JStringType());

  static final _id_FEATURE_HARDWARE_KEYSTORE = _class.staticFieldId(
    r'FEATURE_HARDWARE_KEYSTORE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_HARDWARE_KEYSTORE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_HARDWARE_KEYSTORE =>
      _id_FEATURE_HARDWARE_KEYSTORE.get(_class, const jni.JStringType());

  static final _id_FEATURE_HIFI_SENSORS = _class.staticFieldId(
    r'FEATURE_HIFI_SENSORS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_HIFI_SENSORS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_HIFI_SENSORS =>
      _id_FEATURE_HIFI_SENSORS.get(_class, const jni.JStringType());

  static final _id_FEATURE_HOME_SCREEN = _class.staticFieldId(
    r'FEATURE_HOME_SCREEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_HOME_SCREEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_HOME_SCREEN =>
      _id_FEATURE_HOME_SCREEN.get(_class, const jni.JStringType());

  static final _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE = _class.staticFieldId(
    r'FEATURE_IDENTITY_CREDENTIAL_HARDWARE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_IDENTITY_CREDENTIAL_HARDWARE =>
      _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS =
      _class.staticFieldId(
    r'FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS =>
      _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_INPUT_METHODS = _class.staticFieldId(
    r'FEATURE_INPUT_METHODS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_INPUT_METHODS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_INPUT_METHODS =>
      _id_FEATURE_INPUT_METHODS.get(_class, const jni.JStringType());

  static final _id_FEATURE_IPSEC_TUNNELS = _class.staticFieldId(
    r'FEATURE_IPSEC_TUNNELS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_IPSEC_TUNNELS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_IPSEC_TUNNELS =>
      _id_FEATURE_IPSEC_TUNNELS.get(_class, const jni.JStringType());

  static final _id_FEATURE_IPSEC_TUNNEL_MIGRATION = _class.staticFieldId(
    r'FEATURE_IPSEC_TUNNEL_MIGRATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_IPSEC_TUNNEL_MIGRATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_IPSEC_TUNNEL_MIGRATION =>
      _id_FEATURE_IPSEC_TUNNEL_MIGRATION.get(_class, const jni.JStringType());

  static final _id_FEATURE_IRIS = _class.staticFieldId(
    r'FEATURE_IRIS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_IRIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_IRIS =>
      _id_FEATURE_IRIS.get(_class, const jni.JStringType());

  static final _id_FEATURE_KEYSTORE_APP_ATTEST_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_APP_ATTEST_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_KEYSTORE_APP_ATTEST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_KEYSTORE_APP_ATTEST_KEY =>
      _id_FEATURE_KEYSTORE_APP_ATTEST_KEY.get(_class, const jni.JStringType());

  static final _id_FEATURE_KEYSTORE_LIMITED_USE_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_LIMITED_USE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_KEYSTORE_LIMITED_USE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_KEYSTORE_LIMITED_USE_KEY =>
      _id_FEATURE_KEYSTORE_LIMITED_USE_KEY.get(_class, const jni.JStringType());

  static final _id_FEATURE_KEYSTORE_SINGLE_USE_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_SINGLE_USE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_KEYSTORE_SINGLE_USE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_KEYSTORE_SINGLE_USE_KEY =>
      _id_FEATURE_KEYSTORE_SINGLE_USE_KEY.get(_class, const jni.JStringType());

  static final _id_FEATURE_LEANBACK = _class.staticFieldId(
    r'FEATURE_LEANBACK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LEANBACK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LEANBACK =>
      _id_FEATURE_LEANBACK.get(_class, const jni.JStringType());

  static final _id_FEATURE_LEANBACK_ONLY = _class.staticFieldId(
    r'FEATURE_LEANBACK_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LEANBACK_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LEANBACK_ONLY =>
      _id_FEATURE_LEANBACK_ONLY.get(_class, const jni.JStringType());

  static final _id_FEATURE_LIVE_TV = _class.staticFieldId(
    r'FEATURE_LIVE_TV',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LIVE_TV
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LIVE_TV =>
      _id_FEATURE_LIVE_TV.get(_class, const jni.JStringType());

  static final _id_FEATURE_LIVE_WALLPAPER = _class.staticFieldId(
    r'FEATURE_LIVE_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LIVE_WALLPAPER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LIVE_WALLPAPER =>
      _id_FEATURE_LIVE_WALLPAPER.get(_class, const jni.JStringType());

  static final _id_FEATURE_LOCATION = _class.staticFieldId(
    r'FEATURE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LOCATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LOCATION =>
      _id_FEATURE_LOCATION.get(_class, const jni.JStringType());

  static final _id_FEATURE_LOCATION_GPS = _class.staticFieldId(
    r'FEATURE_LOCATION_GPS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LOCATION_GPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LOCATION_GPS =>
      _id_FEATURE_LOCATION_GPS.get(_class, const jni.JStringType());

  static final _id_FEATURE_LOCATION_NETWORK = _class.staticFieldId(
    r'FEATURE_LOCATION_NETWORK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_LOCATION_NETWORK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_LOCATION_NETWORK =>
      _id_FEATURE_LOCATION_NETWORK.get(_class, const jni.JStringType());

  static final _id_FEATURE_MANAGED_USERS = _class.staticFieldId(
    r'FEATURE_MANAGED_USERS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_MANAGED_USERS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_MANAGED_USERS =>
      _id_FEATURE_MANAGED_USERS.get(_class, const jni.JStringType());

  static final _id_FEATURE_MICROPHONE = _class.staticFieldId(
    r'FEATURE_MICROPHONE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_MICROPHONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_MICROPHONE =>
      _id_FEATURE_MICROPHONE.get(_class, const jni.JStringType());

  static final _id_FEATURE_MIDI = _class.staticFieldId(
    r'FEATURE_MIDI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_MIDI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_MIDI =>
      _id_FEATURE_MIDI.get(_class, const jni.JStringType());

  static final _id_FEATURE_NFC = _class.staticFieldId(
    r'FEATURE_NFC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC =>
      _id_FEATURE_NFC.get(_class, const jni.JStringType());

  static final _id_FEATURE_NFC_BEAM = _class.staticFieldId(
    r'FEATURE_NFC_BEAM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC_BEAM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC_BEAM =>
      _id_FEATURE_NFC_BEAM.get(_class, const jni.JStringType());

  static final _id_FEATURE_NFC_HOST_CARD_EMULATION = _class.staticFieldId(
    r'FEATURE_NFC_HOST_CARD_EMULATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC_HOST_CARD_EMULATION =>
      _id_FEATURE_NFC_HOST_CARD_EMULATION.get(_class, const jni.JStringType());

  static final _id_FEATURE_NFC_HOST_CARD_EMULATION_NFCF = _class.staticFieldId(
    r'FEATURE_NFC_HOST_CARD_EMULATION_NFCF',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC_HOST_CARD_EMULATION_NFCF =>
      _id_FEATURE_NFC_HOST_CARD_EMULATION_NFCF.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE =
      _class.staticFieldId(
    r'FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE =>
      _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC =
      _class.staticFieldId(
    r'FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC =>
      _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_OPENGLES_DEQP_LEVEL = _class.staticFieldId(
    r'FEATURE_OPENGLES_DEQP_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_OPENGLES_DEQP_LEVEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_OPENGLES_DEQP_LEVEL =>
      _id_FEATURE_OPENGLES_DEQP_LEVEL.get(_class, const jni.JStringType());

  static final _id_FEATURE_OPENGLES_EXTENSION_PACK = _class.staticFieldId(
    r'FEATURE_OPENGLES_EXTENSION_PACK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_OPENGLES_EXTENSION_PACK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_OPENGLES_EXTENSION_PACK =>
      _id_FEATURE_OPENGLES_EXTENSION_PACK.get(_class, const jni.JStringType());

  static final _id_FEATURE_PC = _class.staticFieldId(
    r'FEATURE_PC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_PC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_PC =>
      _id_FEATURE_PC.get(_class, const jni.JStringType());

  static final _id_FEATURE_PICTURE_IN_PICTURE = _class.staticFieldId(
    r'FEATURE_PICTURE_IN_PICTURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_PICTURE_IN_PICTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_PICTURE_IN_PICTURE =>
      _id_FEATURE_PICTURE_IN_PICTURE.get(_class, const jni.JStringType());

  static final _id_FEATURE_PRINTING = _class.staticFieldId(
    r'FEATURE_PRINTING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_PRINTING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_PRINTING =>
      _id_FEATURE_PRINTING.get(_class, const jni.JStringType());

  static final _id_FEATURE_RAM_LOW = _class.staticFieldId(
    r'FEATURE_RAM_LOW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_RAM_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_RAM_LOW =>
      _id_FEATURE_RAM_LOW.get(_class, const jni.JStringType());

  static final _id_FEATURE_RAM_NORMAL = _class.staticFieldId(
    r'FEATURE_RAM_NORMAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_RAM_NORMAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_RAM_NORMAL =>
      _id_FEATURE_RAM_NORMAL.get(_class, const jni.JStringType());

  static final _id_FEATURE_SCREEN_LANDSCAPE = _class.staticFieldId(
    r'FEATURE_SCREEN_LANDSCAPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SCREEN_LANDSCAPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SCREEN_LANDSCAPE =>
      _id_FEATURE_SCREEN_LANDSCAPE.get(_class, const jni.JStringType());

  static final _id_FEATURE_SCREEN_PORTRAIT = _class.staticFieldId(
    r'FEATURE_SCREEN_PORTRAIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SCREEN_PORTRAIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SCREEN_PORTRAIT =>
      _id_FEATURE_SCREEN_PORTRAIT.get(_class, const jni.JStringType());

  static final _id_FEATURE_SECURELY_REMOVES_USERS = _class.staticFieldId(
    r'FEATURE_SECURELY_REMOVES_USERS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SECURELY_REMOVES_USERS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SECURELY_REMOVES_USERS =>
      _id_FEATURE_SECURELY_REMOVES_USERS.get(_class, const jni.JStringType());

  static final _id_FEATURE_SECURE_LOCK_SCREEN = _class.staticFieldId(
    r'FEATURE_SECURE_LOCK_SCREEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SECURE_LOCK_SCREEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SECURE_LOCK_SCREEN =>
      _id_FEATURE_SECURE_LOCK_SCREEN.get(_class, const jni.JStringType());

  static final _id_FEATURE_SECURITY_MODEL_COMPATIBLE = _class.staticFieldId(
    r'FEATURE_SECURITY_MODEL_COMPATIBLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SECURITY_MODEL_COMPATIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SECURITY_MODEL_COMPATIBLE =>
      _id_FEATURE_SECURITY_MODEL_COMPATIBLE.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER = _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_ACCELEROMETER =>
      _id_FEATURE_SENSOR_ACCELEROMETER.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES =
      _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES =>
      _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED =
      _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString
      get FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED =>
          _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED.get(
              _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_AMBIENT_TEMPERATURE = _class.staticFieldId(
    r'FEATURE_SENSOR_AMBIENT_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_AMBIENT_TEMPERATURE =>
      _id_FEATURE_SENSOR_AMBIENT_TEMPERATURE.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_BAROMETER = _class.staticFieldId(
    r'FEATURE_SENSOR_BAROMETER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_BAROMETER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_BAROMETER =>
      _id_FEATURE_SENSOR_BAROMETER.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_COMPASS = _class.staticFieldId(
    r'FEATURE_SENSOR_COMPASS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_COMPASS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_COMPASS =>
      _id_FEATURE_SENSOR_COMPASS.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER = _class.staticFieldId(
    r'FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER =>
      _id_FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE = _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_GYROSCOPE =>
      _id_FEATURE_SENSOR_GYROSCOPE.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES = _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES =>
      _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED =
      _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED =>
      _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_HEADING = _class.staticFieldId(
    r'FEATURE_SENSOR_HEADING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_HEADING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_HEADING =>
      _id_FEATURE_SENSOR_HEADING.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_HEART_RATE = _class.staticFieldId(
    r'FEATURE_SENSOR_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_HEART_RATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_HEART_RATE =>
      _id_FEATURE_SENSOR_HEART_RATE.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_HEART_RATE_ECG = _class.staticFieldId(
    r'FEATURE_SENSOR_HEART_RATE_ECG',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_HEART_RATE_ECG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_HEART_RATE_ECG =>
      _id_FEATURE_SENSOR_HEART_RATE_ECG.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_HINGE_ANGLE = _class.staticFieldId(
    r'FEATURE_SENSOR_HINGE_ANGLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_HINGE_ANGLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_HINGE_ANGLE =>
      _id_FEATURE_SENSOR_HINGE_ANGLE.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_LIGHT = _class.staticFieldId(
    r'FEATURE_SENSOR_LIGHT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_LIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_LIGHT =>
      _id_FEATURE_SENSOR_LIGHT.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_PROXIMITY = _class.staticFieldId(
    r'FEATURE_SENSOR_PROXIMITY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_PROXIMITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_PROXIMITY =>
      _id_FEATURE_SENSOR_PROXIMITY.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_RELATIVE_HUMIDITY = _class.staticFieldId(
    r'FEATURE_SENSOR_RELATIVE_HUMIDITY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_RELATIVE_HUMIDITY =>
      _id_FEATURE_SENSOR_RELATIVE_HUMIDITY.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_STEP_COUNTER = _class.staticFieldId(
    r'FEATURE_SENSOR_STEP_COUNTER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_STEP_COUNTER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_STEP_COUNTER =>
      _id_FEATURE_SENSOR_STEP_COUNTER.get(_class, const jni.JStringType());

  static final _id_FEATURE_SENSOR_STEP_DETECTOR = _class.staticFieldId(
    r'FEATURE_SENSOR_STEP_DETECTOR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SENSOR_STEP_DETECTOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SENSOR_STEP_DETECTOR =>
      _id_FEATURE_SENSOR_STEP_DETECTOR.get(_class, const jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_ESE = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_ESE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_ESE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SE_OMAPI_ESE =>
      _id_FEATURE_SE_OMAPI_ESE.get(_class, const jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_SD = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_SD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_SD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SE_OMAPI_SD =>
      _id_FEATURE_SE_OMAPI_SD.get(_class, const jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_UICC = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_UICC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SE_OMAPI_UICC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SE_OMAPI_UICC =>
      _id_FEATURE_SE_OMAPI_UICC.get(_class, const jni.JStringType());

  static final _id_FEATURE_SIP = _class.staticFieldId(
    r'FEATURE_SIP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SIP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SIP =>
      _id_FEATURE_SIP.get(_class, const jni.JStringType());

  static final _id_FEATURE_SIP_VOIP = _class.staticFieldId(
    r'FEATURE_SIP_VOIP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_SIP_VOIP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_SIP_VOIP =>
      _id_FEATURE_SIP_VOIP.get(_class, const jni.JStringType());

  static final _id_FEATURE_STRONGBOX_KEYSTORE = _class.staticFieldId(
    r'FEATURE_STRONGBOX_KEYSTORE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_STRONGBOX_KEYSTORE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_STRONGBOX_KEYSTORE =>
      _id_FEATURE_STRONGBOX_KEYSTORE.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELECOM = _class.staticFieldId(
    r'FEATURE_TELECOM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELECOM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELECOM =>
      _id_FEATURE_TELECOM.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY = _class.staticFieldId(
    r'FEATURE_TELEPHONY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY =>
      _id_FEATURE_TELEPHONY.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_CALLING = _class.staticFieldId(
    r'FEATURE_TELEPHONY_CALLING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_CALLING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_CALLING =>
      _id_FEATURE_TELEPHONY_CALLING.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_CDMA = _class.staticFieldId(
    r'FEATURE_TELEPHONY_CDMA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_CDMA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_CDMA =>
      _id_FEATURE_TELEPHONY_CDMA.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_DATA = _class.staticFieldId(
    r'FEATURE_TELEPHONY_DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_DATA =>
      _id_FEATURE_TELEPHONY_DATA.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_EUICC = _class.staticFieldId(
    r'FEATURE_TELEPHONY_EUICC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_EUICC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_EUICC =>
      _id_FEATURE_TELEPHONY_EUICC.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_EUICC_MEP = _class.staticFieldId(
    r'FEATURE_TELEPHONY_EUICC_MEP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_EUICC_MEP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_EUICC_MEP =>
      _id_FEATURE_TELEPHONY_EUICC_MEP.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_GSM = _class.staticFieldId(
    r'FEATURE_TELEPHONY_GSM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_GSM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_GSM =>
      _id_FEATURE_TELEPHONY_GSM.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_IMS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_IMS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_IMS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_IMS =>
      _id_FEATURE_TELEPHONY_IMS.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_MBMS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_MBMS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_MBMS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_MBMS =>
      _id_FEATURE_TELEPHONY_MBMS.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_MESSAGING = _class.staticFieldId(
    r'FEATURE_TELEPHONY_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_MESSAGING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_MESSAGING =>
      _id_FEATURE_TELEPHONY_MESSAGING.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_RADIO_ACCESS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_RADIO_ACCESS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_RADIO_ACCESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_RADIO_ACCESS =>
      _id_FEATURE_TELEPHONY_RADIO_ACCESS.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEPHONY_SUBSCRIPTION = _class.staticFieldId(
    r'FEATURE_TELEPHONY_SUBSCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEPHONY_SUBSCRIPTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEPHONY_SUBSCRIPTION =>
      _id_FEATURE_TELEPHONY_SUBSCRIPTION.get(_class, const jni.JStringType());

  static final _id_FEATURE_TELEVISION = _class.staticFieldId(
    r'FEATURE_TELEVISION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TELEVISION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TELEVISION =>
      _id_FEATURE_TELEVISION.get(_class, const jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN = _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TOUCHSCREEN =>
      _id_FEATURE_TOUCHSCREEN.get(_class, const jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH = _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH.get(_class, const jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT =
      _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND =
      _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_USB_ACCESSORY = _class.staticFieldId(
    r'FEATURE_USB_ACCESSORY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_USB_ACCESSORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_USB_ACCESSORY =>
      _id_FEATURE_USB_ACCESSORY.get(_class, const jni.JStringType());

  static final _id_FEATURE_USB_HOST = _class.staticFieldId(
    r'FEATURE_USB_HOST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_USB_HOST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_USB_HOST =>
      _id_FEATURE_USB_HOST.get(_class, const jni.JStringType());

  static final _id_FEATURE_UWB = _class.staticFieldId(
    r'FEATURE_UWB',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_UWB
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_UWB =>
      _id_FEATURE_UWB.get(_class, const jni.JStringType());

  static final _id_FEATURE_VERIFIED_BOOT = _class.staticFieldId(
    r'FEATURE_VERIFIED_BOOT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VERIFIED_BOOT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VERIFIED_BOOT =>
      _id_FEATURE_VERIFIED_BOOT.get(_class, const jni.JStringType());

  static final _id_FEATURE_VR_HEADTRACKING = _class.staticFieldId(
    r'FEATURE_VR_HEADTRACKING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VR_HEADTRACKING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VR_HEADTRACKING =>
      _id_FEATURE_VR_HEADTRACKING.get(_class, const jni.JStringType());

  static final _id_FEATURE_VR_MODE = _class.staticFieldId(
    r'FEATURE_VR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VR_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VR_MODE =>
      _id_FEATURE_VR_MODE.get(_class, const jni.JStringType());

  static final _id_FEATURE_VR_MODE_HIGH_PERFORMANCE = _class.staticFieldId(
    r'FEATURE_VR_MODE_HIGH_PERFORMANCE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VR_MODE_HIGH_PERFORMANCE =>
      _id_FEATURE_VR_MODE_HIGH_PERFORMANCE.get(_class, const jni.JStringType());

  static final _id_FEATURE_VULKAN_DEQP_LEVEL = _class.staticFieldId(
    r'FEATURE_VULKAN_DEQP_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VULKAN_DEQP_LEVEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VULKAN_DEQP_LEVEL =>
      _id_FEATURE_VULKAN_DEQP_LEVEL.get(_class, const jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_COMPUTE = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_COMPUTE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_COMPUTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VULKAN_HARDWARE_COMPUTE =>
      _id_FEATURE_VULKAN_HARDWARE_COMPUTE.get(_class, const jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_LEVEL = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_LEVEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VULKAN_HARDWARE_LEVEL =>
      _id_FEATURE_VULKAN_HARDWARE_LEVEL.get(_class, const jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_VERSION = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_VERSION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_VULKAN_HARDWARE_VERSION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_VULKAN_HARDWARE_VERSION =>
      _id_FEATURE_VULKAN_HARDWARE_VERSION.get(_class, const jni.JStringType());

  static final _id_FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS =
      _class.staticFieldId(
    r'FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS =>
      _id_FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS.get(
          _class, const jni.JStringType());

  static final _id_FEATURE_WATCH = _class.staticFieldId(
    r'FEATURE_WATCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WATCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WATCH =>
      _id_FEATURE_WATCH.get(_class, const jni.JStringType());

  static final _id_FEATURE_WEBVIEW = _class.staticFieldId(
    r'FEATURE_WEBVIEW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WEBVIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WEBVIEW =>
      _id_FEATURE_WEBVIEW.get(_class, const jni.JStringType());

  static final _id_FEATURE_WIFI = _class.staticFieldId(
    r'FEATURE_WIFI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WIFI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WIFI =>
      _id_FEATURE_WIFI.get(_class, const jni.JStringType());

  static final _id_FEATURE_WIFI_AWARE = _class.staticFieldId(
    r'FEATURE_WIFI_AWARE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WIFI_AWARE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WIFI_AWARE =>
      _id_FEATURE_WIFI_AWARE.get(_class, const jni.JStringType());

  static final _id_FEATURE_WIFI_DIRECT = _class.staticFieldId(
    r'FEATURE_WIFI_DIRECT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WIFI_DIRECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WIFI_DIRECT =>
      _id_FEATURE_WIFI_DIRECT.get(_class, const jni.JStringType());

  static final _id_FEATURE_WIFI_PASSPOINT = _class.staticFieldId(
    r'FEATURE_WIFI_PASSPOINT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WIFI_PASSPOINT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WIFI_PASSPOINT =>
      _id_FEATURE_WIFI_PASSPOINT.get(_class, const jni.JStringType());

  static final _id_FEATURE_WIFI_RTT = _class.staticFieldId(
    r'FEATURE_WIFI_RTT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WIFI_RTT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WIFI_RTT =>
      _id_FEATURE_WIFI_RTT.get(_class, const jni.JStringType());

  static final _id_FEATURE_WINDOW_MAGNIFICATION = _class.staticFieldId(
    r'FEATURE_WINDOW_MAGNIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FEATURE_WINDOW_MAGNIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FEATURE_WINDOW_MAGNIFICATION =>
      _id_FEATURE_WINDOW_MAGNIFICATION.get(_class, const jni.JStringType());

  /// from: static public final int FLAG_PERMISSION_WHITELIST_INSTALLER
  static const FLAG_PERMISSION_WHITELIST_INSTALLER = 2;

  /// from: static public final int FLAG_PERMISSION_WHITELIST_SYSTEM
  static const FLAG_PERMISSION_WHITELIST_SYSTEM = 1;

  /// from: static public final int FLAG_PERMISSION_WHITELIST_UPGRADE
  static const FLAG_PERMISSION_WHITELIST_UPGRADE = 4;

  /// from: static public final int GET_ACTIVITIES
  static const GET_ACTIVITIES = 1;

  /// from: static public final int GET_ATTRIBUTIONS
  static const GET_ATTRIBUTIONS = -2147483648;

  /// from: static public final long GET_ATTRIBUTIONS_LONG
  static const GET_ATTRIBUTIONS_LONG = 2147483648;

  /// from: static public final int GET_CONFIGURATIONS
  static const GET_CONFIGURATIONS = 16384;

  /// from: static public final int GET_DISABLED_COMPONENTS
  static const GET_DISABLED_COMPONENTS = 512;

  /// from: static public final int GET_DISABLED_UNTIL_USED_COMPONENTS
  static const GET_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: static public final int GET_GIDS
  static const GET_GIDS = 256;

  /// from: static public final int GET_INSTRUMENTATION
  static const GET_INSTRUMENTATION = 16;

  /// from: static public final int GET_INTENT_FILTERS
  static const GET_INTENT_FILTERS = 32;

  /// from: static public final int GET_META_DATA
  static const GET_META_DATA = 128;

  /// from: static public final int GET_PERMISSIONS
  static const GET_PERMISSIONS = 4096;

  /// from: static public final int GET_PROVIDERS
  static const GET_PROVIDERS = 8;

  /// from: static public final int GET_RECEIVERS
  static const GET_RECEIVERS = 2;

  /// from: static public final int GET_RESOLVED_FILTER
  static const GET_RESOLVED_FILTER = 64;

  /// from: static public final int GET_SERVICES
  static const GET_SERVICES = 4;

  /// from: static public final int GET_SHARED_LIBRARY_FILES
  static const GET_SHARED_LIBRARY_FILES = 1024;

  /// from: static public final int GET_SIGNATURES
  static const GET_SIGNATURES = 64;

  /// from: static public final int GET_SIGNING_CERTIFICATES
  static const GET_SIGNING_CERTIFICATES = 134217728;

  /// from: static public final int GET_UNINSTALLED_PACKAGES
  static const GET_UNINSTALLED_PACKAGES = 8192;

  /// from: static public final int GET_URI_PERMISSION_PATTERNS
  static const GET_URI_PERMISSION_PATTERNS = 2048;

  /// from: static public final int INSTALL_REASON_DEVICE_RESTORE
  static const INSTALL_REASON_DEVICE_RESTORE = 2;

  /// from: static public final int INSTALL_REASON_DEVICE_SETUP
  static const INSTALL_REASON_DEVICE_SETUP = 3;

  /// from: static public final int INSTALL_REASON_POLICY
  static const INSTALL_REASON_POLICY = 1;

  /// from: static public final int INSTALL_REASON_UNKNOWN
  static const INSTALL_REASON_UNKNOWN = 0;

  /// from: static public final int INSTALL_REASON_USER
  static const INSTALL_REASON_USER = 4;

  /// from: static public final int INSTALL_SCENARIO_BULK
  static const INSTALL_SCENARIO_BULK = 2;

  /// from: static public final int INSTALL_SCENARIO_BULK_SECONDARY
  static const INSTALL_SCENARIO_BULK_SECONDARY = 3;

  /// from: static public final int INSTALL_SCENARIO_DEFAULT
  static const INSTALL_SCENARIO_DEFAULT = 0;

  /// from: static public final int INSTALL_SCENARIO_FAST
  static const INSTALL_SCENARIO_FAST = 1;

  /// from: static public final int MATCH_ALL
  static const MATCH_ALL = 131072;

  /// from: static public final int MATCH_APEX
  static const MATCH_APEX = 1073741824;

  /// from: static public final int MATCH_DEFAULT_ONLY
  static const MATCH_DEFAULT_ONLY = 65536;

  /// from: static public final int MATCH_DIRECT_BOOT_AUTO
  static const MATCH_DIRECT_BOOT_AUTO = 268435456;

  /// from: static public final int MATCH_DIRECT_BOOT_AWARE
  static const MATCH_DIRECT_BOOT_AWARE = 524288;

  /// from: static public final int MATCH_DIRECT_BOOT_UNAWARE
  static const MATCH_DIRECT_BOOT_UNAWARE = 262144;

  /// from: static public final int MATCH_DISABLED_COMPONENTS
  static const MATCH_DISABLED_COMPONENTS = 512;

  /// from: static public final int MATCH_DISABLED_UNTIL_USED_COMPONENTS
  static const MATCH_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: static public final int MATCH_SYSTEM_ONLY
  static const MATCH_SYSTEM_ONLY = 1048576;

  /// from: static public final int MATCH_UNINSTALLED_PACKAGES
  static const MATCH_UNINSTALLED_PACKAGES = 8192;

  /// from: static public final long MAXIMUM_VERIFICATION_TIMEOUT
  static const MAXIMUM_VERIFICATION_TIMEOUT = 3600000;

  /// from: static public final int PERMISSION_DENIED
  static const PERMISSION_DENIED = -1;

  /// from: static public final int PERMISSION_GRANTED
  static const PERMISSION_GRANTED = 0;
  static final _id_PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT =
      _class.staticFieldId(
    r'PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT =>
      _id_PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT.get(
          _class, const jni.JStringType());

  static final _id_PROPERTY_MEDIA_CAPABILITIES = _class.staticFieldId(
    r'PROPERTY_MEDIA_CAPABILITIES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PROPERTY_MEDIA_CAPABILITIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_MEDIA_CAPABILITIES =>
      _id_PROPERTY_MEDIA_CAPABILITIES.get(_class, const jni.JStringType());

  static final _id_PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES =
      _class.staticFieldId(
    r'PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES =>
      _id_PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES.get(
          _class, const jni.JStringType());

  static final _id_PROPERTY_SPECIAL_USE_FGS_SUBTYPE = _class.staticFieldId(
    r'PROPERTY_SPECIAL_USE_FGS_SUBTYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PROPERTY_SPECIAL_USE_FGS_SUBTYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PROPERTY_SPECIAL_USE_FGS_SUBTYPE =>
      _id_PROPERTY_SPECIAL_USE_FGS_SUBTYPE.get(_class, const jni.JStringType());

  /// from: static public final int SIGNATURE_FIRST_NOT_SIGNED
  static const SIGNATURE_FIRST_NOT_SIGNED = -1;

  /// from: static public final int SIGNATURE_MATCH
  static const SIGNATURE_MATCH = 0;

  /// from: static public final int SIGNATURE_NEITHER_SIGNED
  static const SIGNATURE_NEITHER_SIGNED = 1;

  /// from: static public final int SIGNATURE_NO_MATCH
  static const SIGNATURE_NO_MATCH = -3;

  /// from: static public final int SIGNATURE_SECOND_NOT_SIGNED
  static const SIGNATURE_SECOND_NOT_SIGNED = -2;

  /// from: static public final int SIGNATURE_UNKNOWN_PACKAGE
  static const SIGNATURE_UNKNOWN_PACKAGE = -4;

  /// from: static public final int SYNCHRONOUS
  static const SYNCHRONOUS = 2;
  static final _id_TRUST_ALL = _class.staticFieldId(
    r'TRUST_ALL',
    r'Ljava/util/List;',
  );

  /// from: static public final java.util.List TRUST_ALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> get TRUST_ALL =>
      _id_TRUST_ALL.get(_class, const jni.JListType(jni.JObjectType()));

  static final _id_TRUST_NONE = _class.staticFieldId(
    r'TRUST_NONE',
    r'Ljava/util/List;',
  );

  /// from: static public final java.util.List TRUST_NONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> get TRUST_NONE =>
      _id_TRUST_NONE.get(_class, const jni.JListType(jni.JObjectType()));

  /// from: static public final int VERIFICATION_ALLOW
  static const VERIFICATION_ALLOW = 1;

  /// from: static public final int VERIFICATION_REJECT
  static const VERIFICATION_REJECT = -1;

  /// from: static public final int VERSION_CODE_HIGHEST
  static const VERSION_CODE_HIGHEST = -1;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager() {
    return PackageManager.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getPackageInfo = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageInfo(
    jni.JString string,
    int i,
  ) {
    return _getPackageInfo(reference.pointer,
            _id_getPackageInfo as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const $PackageInfoType());
  }

  static final _id_getPackageInfo1 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.PackageInfo getPackageInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageInfo1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageInfo1(
            reference.pointer,
            _id_getPackageInfo1 as jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const $PackageInfoType());
  }

  static final _id_getPackageInfo2 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Landroid/content/pm/VersionedPackage;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, int i)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageInfo2(
    jni.JObject versionedPackage,
    int i,
  ) {
    return _getPackageInfo2(
            reference.pointer,
            _id_getPackageInfo2 as jni.JMethodIDPtr,
            versionedPackage.reference.pointer,
            i)
        .object(const $PackageInfoType());
  }

  static final _id_getPackageInfo3 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Landroid/content/pm/VersionedPackage;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageInfo3(
    jni.JObject versionedPackage,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageInfo3(
            reference.pointer,
            _id_getPackageInfo3 as jni.JMethodIDPtr,
            versionedPackage.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const $PackageInfoType());
  }

  static final _id_currentToCanonicalPackageNames = _class.instanceMethodId(
    r'currentToCanonicalPackageNames',
    r'([Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _currentToCanonicalPackageNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> currentToCanonicalPackageNames(
    jni.JArray<jni.JString> strings,
  ) {
    return _currentToCanonicalPackageNames(
            reference.pointer,
            _id_currentToCanonicalPackageNames as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_canonicalToCurrentPackageNames = _class.instanceMethodId(
    r'canonicalToCurrentPackageNames',
    r'([Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _canonicalToCurrentPackageNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> canonicalToCurrentPackageNames(
    jni.JArray<jni.JString> strings,
  ) {
    return _canonicalToCurrentPackageNames(
            reference.pointer,
            _id_canonicalToCurrentPackageNames as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getLaunchIntentForPackage = _class.instanceMethodId(
    r'getLaunchIntentForPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getLaunchIntentForPackage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent getLaunchIntentForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLaunchIntentForPackage(
    jni.JString string,
  ) {
    return _getLaunchIntentForPackage(
            reference.pointer,
            _id_getLaunchIntentForPackage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getLeanbackLaunchIntentForPackage = _class.instanceMethodId(
    r'getLeanbackLaunchIntentForPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getLeanbackLaunchIntentForPackage =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLeanbackLaunchIntentForPackage(
    jni.JString string,
  ) {
    return _getLeanbackLaunchIntentForPackage(
            reference.pointer,
            _id_getLeanbackLaunchIntentForPackage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getLaunchIntentSenderForPackage = _class.instanceMethodId(
    r'getLaunchIntentSenderForPackage',
    r'(Ljava/lang/String;)Landroid/content/IntentSender;',
  );

  static final _getLaunchIntentSenderForPackage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLaunchIntentSenderForPackage(
    jni.JString string,
  ) {
    return _getLaunchIntentSenderForPackage(
            reference.pointer,
            _id_getLaunchIntentSenderForPackage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageGids = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;)[I',
  );

  static final _getPackageGids = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int[] getPackageGids(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids(
    jni.JString string,
  ) {
    return _getPackageGids(reference.pointer,
            _id_getPackageGids as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_getPackageGids1 = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;I)[I',
  );

  static final _getPackageGids1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int[] getPackageGids(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids1(
    jni.JString string,
    int i,
  ) {
    return _getPackageGids1(
            reference.pointer,
            _id_getPackageGids1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_getPackageGids2 = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)[I',
  );

  static final _getPackageGids2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getPackageGids(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPackageGids2(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageGids2(
            reference.pointer,
            _id_getPackageGids2 as jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_getPackageUid = _class.instanceMethodId(
    r'getPackageUid',
    r'(Ljava/lang/String;I)I',
  );

  static final _getPackageUid = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int getPackageUid(java.lang.String string, int i)
  int getPackageUid(
    jni.JString string,
    int i,
  ) {
    return _getPackageUid(reference.pointer,
            _id_getPackageUid as jni.JMethodIDPtr, string.reference.pointer, i)
        .integer;
  }

  static final _id_getPackageUid1 = _class.instanceMethodId(
    r'getPackageUid',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)I',
  );

  static final _getPackageUid1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPackageUid(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  int getPackageUid1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageUid1(
            reference.pointer,
            _id_getPackageUid1 as jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .integer;
  }

  static final _id_getPermissionInfo = _class.instanceMethodId(
    r'getPermissionInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;',
  );

  static final _getPermissionInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.PermissionInfo getPermissionInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPermissionInfo(
    jni.JString string,
    int i,
  ) {
    return _getPermissionInfo(
            reference.pointer,
            _id_getPermissionInfo as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_queryPermissionsByGroup = _class.instanceMethodId(
    r'queryPermissionsByGroup',
    r'(Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _queryPermissionsByGroup = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryPermissionsByGroup(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryPermissionsByGroup(
    jni.JString string,
    int i,
  ) {
    return _queryPermissionsByGroup(
            reference.pointer,
            _id_queryPermissionsByGroup as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getPermissionGroupInfo = _class.instanceMethodId(
    r'getPermissionGroupInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;',
  );

  static final _getPermissionGroupInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPermissionGroupInfo(
    jni.JString string,
    int i,
  ) {
    return _getPermissionGroupInfo(
            reference.pointer,
            _id_getPermissionGroupInfo as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getAllPermissionGroups = _class.instanceMethodId(
    r'getAllPermissionGroups',
    r'(I)Ljava/util/List;',
  );

  static final _getAllPermissionGroups = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.util.List getAllPermissionGroups(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAllPermissionGroups(
    int i,
  ) {
    return _getAllPermissionGroups(reference.pointer,
            _id_getAllPermissionGroups as jni.JMethodIDPtr, i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getPlatformPermissionsForGroup = _class.instanceMethodId(
    r'getPlatformPermissionsForGroup',
    r'(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getPlatformPermissionsForGroup = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void getPlatformPermissionsForGroup(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)
  void getPlatformPermissionsForGroup(
    jni.JString string,
    jni.JObject executor,
    jni.JObject consumer,
  ) {
    _getPlatformPermissionsForGroup(
            reference.pointer,
            _id_getPlatformPermissionsForGroup as jni.JMethodIDPtr,
            string.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getGroupOfPlatformPermission = _class.instanceMethodId(
    r'getGroupOfPlatformPermission',
    r'(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getGroupOfPlatformPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void getGroupOfPlatformPermission(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)
  void getGroupOfPlatformPermission(
    jni.JString string,
    jni.JObject executor,
    jni.JObject consumer,
  ) {
    _getGroupOfPlatformPermission(
            reference.pointer,
            _id_getGroupOfPlatformPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  ApplicationInfo getApplicationInfo(
    jni.JString string,
    int i,
  ) {
    return _getApplicationInfo(
            reference.pointer,
            _id_getApplicationInfo as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $ApplicationInfoType());
  }

  static final _id_getApplicationInfo1 = _class.instanceMethodId(
    r'getApplicationInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  ApplicationInfo getApplicationInfo1(
    jni.JString string,
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return _getApplicationInfo1(
            reference.pointer,
            _id_getApplicationInfo1 as jni.JMethodIDPtr,
            string.reference.pointer,
            applicationInfoFlags.reference.pointer)
        .object(const $ApplicationInfoType());
  }

  static final _id_getTargetSdkVersion = _class.instanceMethodId(
    r'getTargetSdkVersion',
    r'(Ljava/lang/String;)I',
  );

  static final _getTargetSdkVersion = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int getTargetSdkVersion(java.lang.String string)
  int getTargetSdkVersion(
    jni.JString string,
  ) {
    return _getTargetSdkVersion(
            reference.pointer,
            _id_getTargetSdkVersion as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_getActivityInfo = _class.instanceMethodId(
    r'getActivityInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _getActivityInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityInfo(
    jni.JObject componentName,
    int i,
  ) {
    return _getActivityInfo(
            reference.pointer,
            _id_getActivityInfo as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityInfo1 = _class.instanceMethodId(
    r'getActivityInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;',
  );

  static final _getActivityInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getActivityInfo1(
            reference.pointer,
            _id_getActivityInfo1 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getReceiverInfo = _class.instanceMethodId(
    r'getReceiverInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _getReceiverInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReceiverInfo(
    jni.JObject componentName,
    int i,
  ) {
    return _getReceiverInfo(
            reference.pointer,
            _id_getReceiverInfo as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getReceiverInfo1 = _class.instanceMethodId(
    r'getReceiverInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;',
  );

  static final _getReceiverInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReceiverInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getReceiverInfo1(
            reference.pointer,
            _id_getReceiverInfo1 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getServiceInfo = _class.instanceMethodId(
    r'getServiceInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ServiceInfo;',
  );

  static final _getServiceInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServiceInfo(
    jni.JObject componentName,
    int i,
  ) {
    return _getServiceInfo(
            reference.pointer,
            _id_getServiceInfo as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getServiceInfo1 = _class.instanceMethodId(
    r'getServiceInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ServiceInfo;',
  );

  static final _getServiceInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServiceInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getServiceInfo1(
            reference.pointer,
            _id_getServiceInfo1 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getProviderInfo = _class.instanceMethodId(
    r'getProviderInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ProviderInfo;',
  );

  static final _getProviderInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getProviderInfo(
    jni.JObject componentName,
    int i,
  ) {
    return _getProviderInfo(
            reference.pointer,
            _id_getProviderInfo as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getProviderInfo1 = _class.instanceMethodId(
    r'getProviderInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;',
  );

  static final _getProviderInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getProviderInfo1(
    jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getProviderInfo1(
            reference.pointer,
            _id_getProviderInfo1 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getModuleInfo = _class.instanceMethodId(
    r'getModuleInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;',
  );

  static final _getModuleInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.pm.ModuleInfo getModuleInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getModuleInfo(
    jni.JString string,
    int i,
  ) {
    return _getModuleInfo(reference.pointer,
            _id_getModuleInfo as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_getInstalledModules = _class.instanceMethodId(
    r'getInstalledModules',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledModules = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.util.List getInstalledModules(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInstalledModules(
    int i,
  ) {
    return _getInstalledModules(
            reference.pointer, _id_getInstalledModules as jni.JMethodIDPtr, i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getInstalledPackages = _class.instanceMethodId(
    r'getInstalledPackages',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledPackages = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.util.List getInstalledPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageInfo> getInstalledPackages(
    int i,
  ) {
    return _getInstalledPackages(
            reference.pointer, _id_getInstalledPackages as jni.JMethodIDPtr, i)
        .object(const jni.JListType($PackageInfoType()));
  }

  static final _id_getInstalledPackages1 = _class.instanceMethodId(
    r'getInstalledPackages',
    r'(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getInstalledPackages1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageInfo> getInstalledPackages1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getInstalledPackages1(
            reference.pointer,
            _id_getInstalledPackages1 as jni.JMethodIDPtr,
            packageInfoFlags.reference.pointer)
        .object(const jni.JListType($PackageInfoType()));
  }

  static final _id_getPackagesHoldingPermissions = _class.instanceMethodId(
    r'getPackagesHoldingPermissions',
    r'([Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _getPackagesHoldingPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageInfo> getPackagesHoldingPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    return _getPackagesHoldingPermissions(
            reference.pointer,
            _id_getPackagesHoldingPermissions as jni.JMethodIDPtr,
            strings.reference.pointer,
            i)
        .object(const jni.JListType($PackageInfoType()));
  }

  static final _id_getPackagesHoldingPermissions1 = _class.instanceMethodId(
    r'getPackagesHoldingPermissions',
    r'([Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getPackagesHoldingPermissions1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageInfo> getPackagesHoldingPermissions1(
    jni.JArray<jni.JString> strings,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackagesHoldingPermissions1(
            reference.pointer,
            _id_getPackagesHoldingPermissions1 as jni.JMethodIDPtr,
            strings.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const jni.JListType($PackageInfoType()));
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _checkPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkPermission(java.lang.String string, java.lang.String string1)
  int checkPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .integer;
  }

  static final _id_isPermissionRevokedByPolicy = _class.instanceMethodId(
    r'isPermissionRevokedByPolicy',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _isPermissionRevokedByPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isPermissionRevokedByPolicy(java.lang.String string, java.lang.String string1)
  bool isPermissionRevokedByPolicy(
    jni.JString string,
    jni.JString string1,
  ) {
    return _isPermissionRevokedByPolicy(
            reference.pointer,
            _id_isPermissionRevokedByPolicy as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .boolean;
  }

  static final _id_addPermission = _class.instanceMethodId(
    r'addPermission',
    r'(Landroid/content/pm/PermissionInfo;)Z',
  );

  static final _addPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addPermission(android.content.pm.PermissionInfo permissionInfo)
  bool addPermission(
    jni.JObject permissionInfo,
  ) {
    return _addPermission(
            reference.pointer,
            _id_addPermission as jni.JMethodIDPtr,
            permissionInfo.reference.pointer)
        .boolean;
  }

  static final _id_addPermissionAsync = _class.instanceMethodId(
    r'addPermissionAsync',
    r'(Landroid/content/pm/PermissionInfo;)Z',
  );

  static final _addPermissionAsync = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addPermissionAsync(android.content.pm.PermissionInfo permissionInfo)
  bool addPermissionAsync(
    jni.JObject permissionInfo,
  ) {
    return _addPermissionAsync(
            reference.pointer,
            _id_addPermissionAsync as jni.JMethodIDPtr,
            permissionInfo.reference.pointer)
        .boolean;
  }

  static final _id_removePermission = _class.instanceMethodId(
    r'removePermission',
    r'(Ljava/lang/String;)V',
  );

  static final _removePermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removePermission(java.lang.String string)
  void removePermission(
    jni.JString string,
  ) {
    _removePermission(reference.pointer,
            _id_removePermission as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getWhitelistedRestrictedPermissions =
      _class.instanceMethodId(
    r'getWhitelistedRestrictedPermissions',
    r'(Ljava/lang/String;I)Ljava/util/Set;',
  );

  static final _getWhitelistedRestrictedPermissions =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.Set getWhitelistedRestrictedPermissions(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getWhitelistedRestrictedPermissions(
    jni.JString string,
    int i,
  ) {
    return _getWhitelistedRestrictedPermissions(
            reference.pointer,
            _id_getWhitelistedRestrictedPermissions as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_addWhitelistedRestrictedPermission = _class.instanceMethodId(
    r'addWhitelistedRestrictedPermission',
    r'(Ljava/lang/String;Ljava/lang/String;I)Z',
  );

  static final _addWhitelistedRestrictedPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            $Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean addWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)
  bool addWhitelistedRestrictedPermission(
    jni.JString string,
    jni.JString string1,
    int i,
  ) {
    return _addWhitelistedRestrictedPermission(
            reference.pointer,
            _id_addWhitelistedRestrictedPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i)
        .boolean;
  }

  static final _id_removeWhitelistedRestrictedPermission =
      _class.instanceMethodId(
    r'removeWhitelistedRestrictedPermission',
    r'(Ljava/lang/String;Ljava/lang/String;I)Z',
  );

  static final _removeWhitelistedRestrictedPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            $Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean removeWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)
  bool removeWhitelistedRestrictedPermission(
    jni.JString string,
    jni.JString string1,
    int i,
  ) {
    return _removeWhitelistedRestrictedPermission(
            reference.pointer,
            _id_removeWhitelistedRestrictedPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i)
        .boolean;
  }

  static final _id_setAutoRevokeWhitelisted = _class.instanceMethodId(
    r'setAutoRevokeWhitelisted',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _setAutoRevokeWhitelisted = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setAutoRevokeWhitelisted(java.lang.String string, boolean z)
  bool setAutoRevokeWhitelisted(
    jni.JString string,
    bool z,
  ) {
    return _setAutoRevokeWhitelisted(
            reference.pointer,
            _id_setAutoRevokeWhitelisted as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_isAutoRevokeWhitelisted = _class.instanceMethodId(
    r'isAutoRevokeWhitelisted',
    r'(Ljava/lang/String;)Z',
  );

  static final _isAutoRevokeWhitelisted = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAutoRevokeWhitelisted(java.lang.String string)
  bool isAutoRevokeWhitelisted(
    jni.JString string,
  ) {
    return _isAutoRevokeWhitelisted(
            reference.pointer,
            _id_isAutoRevokeWhitelisted as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getBackgroundPermissionOptionLabel = _class.instanceMethodId(
    r'getBackgroundPermissionOptionLabel',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getBackgroundPermissionOptionLabel =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public java.lang.CharSequence getBackgroundPermissionOptionLabel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBackgroundPermissionOptionLabel() {
    return _getBackgroundPermissionOptionLabel(reference.pointer,
            _id_getBackgroundPermissionOptionLabel as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_checkSignatures = _class.instanceMethodId(
    r'checkSignatures',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _checkSignatures = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSignatures(java.lang.String string, java.lang.String string1)
  int checkSignatures(
    jni.JString string,
    jni.JString string1,
  ) {
    return _checkSignatures(
            reference.pointer,
            _id_checkSignatures as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .integer;
  }

  static final _id_checkSignatures1 = _class.instanceMethodId(
    r'checkSignatures',
    r'(II)I',
  );

  static final _checkSignatures1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public abstract int checkSignatures(int i, int i1)
  int checkSignatures1(
    int i,
    int i1,
  ) {
    return _checkSignatures1(
            reference.pointer, _id_checkSignatures1 as jni.JMethodIDPtr, i, i1)
        .integer;
  }

  static final _id_getPackagesForUid = _class.instanceMethodId(
    r'getPackagesForUid',
    r'(I)[Ljava/lang/String;',
  );

  static final _getPackagesForUid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String[] getPackagesForUid(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getPackagesForUid(
    int i,
  ) {
    return _getPackagesForUid(
            reference.pointer, _id_getPackagesForUid as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getNameForUid = _class.instanceMethodId(
    r'getNameForUid',
    r'(I)Ljava/lang/String;',
  );

  static final _getNameForUid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String getNameForUid(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getNameForUid(
    int i,
  ) {
    return _getNameForUid(
            reference.pointer, _id_getNameForUid as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getInstalledApplications = _class.instanceMethodId(
    r'getInstalledApplications',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledApplications = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.util.List getInstalledApplications(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ApplicationInfo> getInstalledApplications(
    int i,
  ) {
    return _getInstalledApplications(reference.pointer,
            _id_getInstalledApplications as jni.JMethodIDPtr, i)
        .object(const jni.JListType($ApplicationInfoType()));
  }

  static final _id_getInstalledApplications1 = _class.instanceMethodId(
    r'getInstalledApplications',
    r'(Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Ljava/util/List;',
  );

  static final _getInstalledApplications1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<ApplicationInfo> getInstalledApplications1(
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return _getInstalledApplications1(
            reference.pointer,
            _id_getInstalledApplications1 as jni.JMethodIDPtr,
            applicationInfoFlags.reference.pointer)
        .object(const jni.JListType($ApplicationInfoType()));
  }

  static final _id_isInstantApp = _class.instanceMethodId(
    r'isInstantApp',
    r'()Z',
  );

  static final _isInstantApp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isInstantApp()
  bool isInstantApp() {
    return _isInstantApp(
            reference.pointer, _id_isInstantApp as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isInstantApp1 = _class.instanceMethodId(
    r'isInstantApp',
    r'(Ljava/lang/String;)Z',
  );

  static final _isInstantApp1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isInstantApp(java.lang.String string)
  bool isInstantApp1(
    jni.JString string,
  ) {
    return _isInstantApp1(reference.pointer,
            _id_isInstantApp1 as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getInstantAppCookieMaxBytes = _class.instanceMethodId(
    r'getInstantAppCookieMaxBytes',
    r'()I',
  );

  static final _getInstantAppCookieMaxBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getInstantAppCookieMaxBytes()
  int getInstantAppCookieMaxBytes() {
    return _getInstantAppCookieMaxBytes(reference.pointer,
            _id_getInstantAppCookieMaxBytes as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getInstantAppCookie = _class.instanceMethodId(
    r'getInstantAppCookie',
    r'()[B',
  );

  static final _getInstantAppCookie = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract byte[] getInstantAppCookie()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getInstantAppCookie() {
    return _getInstantAppCookie(
            reference.pointer, _id_getInstantAppCookie as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_clearInstantAppCookie = _class.instanceMethodId(
    r'clearInstantAppCookie',
    r'()V',
  );

  static final _clearInstantAppCookie = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void clearInstantAppCookie()
  void clearInstantAppCookie() {
    _clearInstantAppCookie(
            reference.pointer, _id_clearInstantAppCookie as jni.JMethodIDPtr)
        .check();
  }

  static final _id_updateInstantAppCookie = _class.instanceMethodId(
    r'updateInstantAppCookie',
    r'([B)V',
  );

  static final _updateInstantAppCookie = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void updateInstantAppCookie(byte[] bs)
  void updateInstantAppCookie(
    jni.JArray<jni.jbyte> bs,
  ) {
    _updateInstantAppCookie(
            reference.pointer,
            _id_updateInstantAppCookie as jni.JMethodIDPtr,
            bs.reference.pointer)
        .check();
  }

  static final _id_getSystemSharedLibraryNames = _class.instanceMethodId(
    r'getSystemSharedLibraryNames',
    r'()[Ljava/lang/String;',
  );

  static final _getSystemSharedLibraryNames = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] getSystemSharedLibraryNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getSystemSharedLibraryNames() {
    return _getSystemSharedLibraryNames(reference.pointer,
            _id_getSystemSharedLibraryNames as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getSharedLibraries = _class.instanceMethodId(
    r'getSharedLibraries',
    r'(I)Ljava/util/List;',
  );

  static final _getSharedLibraries = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.util.List getSharedLibraries(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getSharedLibraries(
    int i,
  ) {
    return _getSharedLibraries(
            reference.pointer, _id_getSharedLibraries as jni.JMethodIDPtr, i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getSharedLibraries1 = _class.instanceMethodId(
    r'getSharedLibraries',
    r'(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getSharedLibraries1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getSharedLibraries1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getSharedLibraries1(
            reference.pointer,
            _id_getSharedLibraries1 as jni.JMethodIDPtr,
            packageInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getChangedPackages = _class.instanceMethodId(
    r'getChangedPackages',
    r'(I)Landroid/content/pm/ChangedPackages;',
  );

  static final _getChangedPackages = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract android.content.pm.ChangedPackages getChangedPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getChangedPackages(
    int i,
  ) {
    return _getChangedPackages(
            reference.pointer, _id_getChangedPackages as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getSystemAvailableFeatures = _class.instanceMethodId(
    r'getSystemAvailableFeatures',
    r'()[Landroid/content/pm/FeatureInfo;',
  );

  static final _getSystemAvailableFeatures = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getSystemAvailableFeatures() {
    return _getSystemAvailableFeatures(reference.pointer,
            _id_getSystemAvailableFeatures as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_hasSystemFeature = _class.instanceMethodId(
    r'hasSystemFeature',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasSystemFeature = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasSystemFeature(java.lang.String string)
  bool hasSystemFeature(
    jni.JString string,
  ) {
    return _hasSystemFeature(reference.pointer,
            _id_hasSystemFeature as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_hasSystemFeature1 = _class.instanceMethodId(
    r'hasSystemFeature',
    r'(Ljava/lang/String;I)Z',
  );

  static final _hasSystemFeature1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean hasSystemFeature(java.lang.String string, int i)
  bool hasSystemFeature1(
    jni.JString string,
    int i,
  ) {
    return _hasSystemFeature1(
            reference.pointer,
            _id_hasSystemFeature1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .boolean;
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity(
    jni.JObject intent,
    int i,
  ) {
    return _resolveActivity(
            reference.pointer,
            _id_resolveActivity as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_resolveActivity1 = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _resolveActivity1(
            reference.pointer,
            _id_resolveActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_queryIntentActivities = _class.instanceMethodId(
    r'queryIntentActivities',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryIntentActivities(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentActivities(
    jni.JObject intent,
    int i,
  ) {
    return _queryIntentActivities(
            reference.pointer,
            _id_queryIntentActivities as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentActivities1 = _class.instanceMethodId(
    r'queryIntentActivities',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryIntentActivities(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentActivities1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentActivities1(
            reference.pointer,
            _id_queryIntentActivities1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentActivityOptions = _class.instanceMethodId(
    r'queryIntentActivityOptions',
    r'(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentActivityOptions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.lang.Object[] intents, android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentActivityOptions(
    jni.JObject componentName,
    jni.JArray<jni.JObject> intents,
    jni.JObject intent,
    int i,
  ) {
    return _queryIntentActivityOptions(
            reference.pointer,
            _id_queryIntentActivityOptions as jni.JMethodIDPtr,
            componentName.reference.pointer,
            intents.reference.pointer,
            intent.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentActivityOptions1 = _class.instanceMethodId(
    r'queryIntentActivityOptions',
    r'(Landroid/content/ComponentName;Ljava/util/List;Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentActivityOptions1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.util.List list, android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentActivityOptions1(
    jni.JObject componentName,
    jni.JList<jni.JObject> list,
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentActivityOptions1(
            reference.pointer,
            _id_queryIntentActivityOptions1 as jni.JMethodIDPtr,
            componentName.reference.pointer,
            list.reference.pointer,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryBroadcastReceivers = _class.instanceMethodId(
    r'queryBroadcastReceivers',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryBroadcastReceivers = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryBroadcastReceivers(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryBroadcastReceivers(
    jni.JObject intent,
    int i,
  ) {
    return _queryBroadcastReceivers(
            reference.pointer,
            _id_queryBroadcastReceivers as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryBroadcastReceivers1 = _class.instanceMethodId(
    r'queryBroadcastReceivers',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryBroadcastReceivers1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryBroadcastReceivers(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryBroadcastReceivers1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryBroadcastReceivers1(
            reference.pointer,
            _id_queryBroadcastReceivers1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_resolveService = _class.instanceMethodId(
    r'resolveService',
    r'(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveService(
    jni.JObject intent,
    int i,
  ) {
    return _resolveService(reference.pointer,
            _id_resolveService as jni.JMethodIDPtr, intent.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_resolveService1 = _class.instanceMethodId(
    r'resolveService',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveService1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _resolveService1(
            reference.pointer,
            _id_resolveService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_queryIntentServices = _class.instanceMethodId(
    r'queryIntentServices',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentServices = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryIntentServices(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentServices(
    jni.JObject intent,
    int i,
  ) {
    return _queryIntentServices(
            reference.pointer,
            _id_queryIntentServices as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentServices1 = _class.instanceMethodId(
    r'queryIntentServices',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentServices1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryIntentServices(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentServices1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentServices1(
            reference.pointer,
            _id_queryIntentServices1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentContentProviders = _class.instanceMethodId(
    r'queryIntentContentProviders',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentContentProviders = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryIntentContentProviders(android.content.Intent intent, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentContentProviders(
    jni.JObject intent,
    int i,
  ) {
    return _queryIntentContentProviders(
            reference.pointer,
            _id_queryIntentContentProviders as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryIntentContentProviders1 = _class.instanceMethodId(
    r'queryIntentContentProviders',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentContentProviders1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryIntentContentProviders(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryIntentContentProviders1(
    jni.JObject intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentContentProviders1(
            reference.pointer,
            _id_queryIntentContentProviders1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_resolveContentProvider = _class.instanceMethodId(
    r'resolveContentProvider',
    r'(Ljava/lang/String;I)Landroid/content/pm/ProviderInfo;',
  );

  static final _resolveContentProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveContentProvider(
    jni.JString string,
    int i,
  ) {
    return _resolveContentProvider(
            reference.pointer,
            _id_resolveContentProvider as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_resolveContentProvider1 = _class.instanceMethodId(
    r'resolveContentProvider',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;',
  );

  static final _resolveContentProvider1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveContentProvider1(
    jni.JString string,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _resolveContentProvider1(
            reference.pointer,
            _id_resolveContentProvider1 as jni.JMethodIDPtr,
            string.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_queryContentProviders = _class.instanceMethodId(
    r'queryContentProviders',
    r'(Ljava/lang/String;II)Ljava/util/List;',
  );

  static final _queryContentProviders = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract java.util.List queryContentProviders(java.lang.String string, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryContentProviders(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _queryContentProviders(
            reference.pointer,
            _id_queryContentProviders as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_queryContentProviders1 = _class.instanceMethodId(
    r'queryContentProviders',
    r'(Ljava/lang/String;ILandroid/content/pm/PackageManager$ComponentInfoFlags;)Ljava/util/List;',
  );

  static final _queryContentProviders1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryContentProviders(java.lang.String string, int i, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryContentProviders1(
    jni.JString string,
    int i,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _queryContentProviders1(
            reference.pointer,
            _id_queryContentProviders1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            componentInfoFlags.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getInstrumentationInfo = _class.instanceMethodId(
    r'getInstrumentationInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;',
  );

  static final _getInstrumentationInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName componentName, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getInstrumentationInfo(
    jni.JObject componentName,
    int i,
  ) {
    return _getInstrumentationInfo(
            reference.pointer,
            _id_getInstrumentationInfo as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_queryInstrumentation = _class.instanceMethodId(
    r'queryInstrumentation',
    r'(Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _queryInstrumentation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List queryInstrumentation(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> queryInstrumentation(
    jni.JString string,
    int i,
  ) {
    return _queryInstrumentation(
            reference.pointer,
            _id_queryInstrumentation as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    jni.JString string,
    int i,
    ApplicationInfo applicationInfo,
  ) {
    return _getDrawable(reference.pointer, _id_getDrawable as jni.JMethodIDPtr,
            string.reference.pointer, i, applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityIcon = _class.instanceMethodId(
    r'getActivityIcon',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityIcon = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityIcon(
    jni.JObject componentName,
  ) {
    return _getActivityIcon(
            reference.pointer,
            _id_getActivityIcon as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityIcon1 = _class.instanceMethodId(
    r'getActivityIcon',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityIcon1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityIcon1(
    jni.JObject intent,
  ) {
    return _getActivityIcon1(reference.pointer,
            _id_getActivityIcon1 as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityBanner = _class.instanceMethodId(
    r'getActivityBanner',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityBanner = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityBanner(
    jni.JObject componentName,
  ) {
    return _getActivityBanner(
            reference.pointer,
            _id_getActivityBanner as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityBanner1 = _class.instanceMethodId(
    r'getActivityBanner',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityBanner1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityBanner1(
    jni.JObject intent,
  ) {
    return _getActivityBanner1(
            reference.pointer,
            _id_getActivityBanner1 as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDefaultActivityIcon = _class.instanceMethodId(
    r'getDefaultActivityIcon',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getDefaultActivityIcon = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable getDefaultActivityIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDefaultActivityIcon() {
    return _getDefaultActivityIcon(
            reference.pointer, _id_getDefaultActivityIcon as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationIcon = _class.instanceMethodId(
    r'getApplicationIcon',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationIcon = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationIcon(
    ApplicationInfo applicationInfo,
  ) {
    return _getApplicationIcon(
            reference.pointer,
            _id_getApplicationIcon as jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationIcon1 = _class.instanceMethodId(
    r'getApplicationIcon',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationIcon1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationIcon(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationIcon1(
    jni.JString string,
  ) {
    return _getApplicationIcon1(
            reference.pointer,
            _id_getApplicationIcon1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationBanner = _class.instanceMethodId(
    r'getApplicationBanner',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationBanner = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationBanner(
    ApplicationInfo applicationInfo,
  ) {
    return _getApplicationBanner(
            reference.pointer,
            _id_getApplicationBanner as jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationBanner1 = _class.instanceMethodId(
    r'getApplicationBanner',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationBanner1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationBanner(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationBanner1(
    jni.JString string,
  ) {
    return _getApplicationBanner1(
            reference.pointer,
            _id_getApplicationBanner1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityLogo = _class.instanceMethodId(
    r'getActivityLogo',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityLogo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityLogo(
    jni.JObject componentName,
  ) {
    return _getActivityLogo(
            reference.pointer,
            _id_getActivityLogo as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getActivityLogo1 = _class.instanceMethodId(
    r'getActivityLogo',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityLogo1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActivityLogo1(
    jni.JObject intent,
  ) {
    return _getActivityLogo1(reference.pointer,
            _id_getActivityLogo1 as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationLogo = _class.instanceMethodId(
    r'getApplicationLogo',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationLogo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLogo(
    ApplicationInfo applicationInfo,
  ) {
    return _getApplicationLogo(
            reference.pointer,
            _id_getApplicationLogo as jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationLogo1 = _class.instanceMethodId(
    r'getApplicationLogo',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationLogo1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getApplicationLogo(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLogo1(
    jni.JString string,
  ) {
    return _getApplicationLogo1(
            reference.pointer,
            _id_getApplicationLogo1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getUserBadgedIcon = _class.instanceMethodId(
    r'getUserBadgedIcon',
    r'(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getUserBadgedIcon = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedIcon(
    jni.JObject drawable,
    jni.JObject userHandle,
  ) {
    return _getUserBadgedIcon(
            reference.pointer,
            _id_getUserBadgedIcon as jni.JMethodIDPtr,
            drawable.reference.pointer,
            userHandle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getUserBadgedDrawableForDensity = _class.instanceMethodId(
    r'getUserBadgedDrawableForDensity',
    r'(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getUserBadgedDrawableForDensity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle, android.graphics.Rect rect, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedDrawableForDensity(
    jni.JObject drawable,
    jni.JObject userHandle,
    jni.JObject rect,
    int i,
  ) {
    return _getUserBadgedDrawableForDensity(
            reference.pointer,
            _id_getUserBadgedDrawableForDensity as jni.JMethodIDPtr,
            drawable.reference.pointer,
            userHandle.reference.pointer,
            rect.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getUserBadgedLabel = _class.instanceMethodId(
    r'getUserBadgedLabel',
    r'(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;',
  );

  static final _getUserBadgedLabel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence charSequence, android.os.UserHandle userHandle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserBadgedLabel(
    jni.JObject charSequence,
    jni.JObject userHandle,
  ) {
    return _getUserBadgedLabel(
            reference.pointer,
            _id_getUserBadgedLabel as jni.JMethodIDPtr,
            charSequence.reference.pointer,
            userHandle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;',
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.CharSequence getText(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    jni.JString string,
    int i,
    ApplicationInfo applicationInfo,
  ) {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr,
            string.reference.pointer, i, applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getXml = _class.instanceMethodId(
    r'getXml',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/content/res/XmlResourceParser;',
  );

  static final _getXml = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.XmlResourceParser getXml(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getXml(
    jni.JString string,
    int i,
    ApplicationInfo applicationInfo,
  ) {
    return _getXml(reference.pointer, _id_getXml as jni.JMethodIDPtr,
            string.reference.pointer, i, applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationLabel = _class.instanceMethodId(
    r'getApplicationLabel',
    r'(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;',
  );

  static final _getApplicationLabel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationLabel(
    ApplicationInfo applicationInfo,
  ) {
    return _getApplicationLabel(
            reference.pointer,
            _id_getApplicationLabel as jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getResourcesForActivity = _class.instanceMethodId(
    r'getResourcesForActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources getResourcesForActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForActivity(
    jni.JObject componentName,
  ) {
    return _getResourcesForActivity(
            reference.pointer,
            _id_getResourcesForActivity as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getResourcesForApplication = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication(
    ApplicationInfo applicationInfo,
  ) {
    return _getResourcesForApplication(
            reference.pointer,
            _id_getResourcesForApplication as jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getResourcesForApplication1 = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Landroid/content/pm/ApplicationInfo;Landroid/content/res/Configuration;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo, android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication1(
    ApplicationInfo applicationInfo,
    jni.JObject configuration,
  ) {
    return _getResourcesForApplication1(
            reference.pointer,
            _id_getResourcesForApplication1 as jni.JMethodIDPtr,
            applicationInfo.reference.pointer,
            configuration.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getResourcesForApplication2 = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Ljava/lang/String;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources getResourcesForApplication(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResourcesForApplication2(
    jni.JString string,
  ) {
    return _getResourcesForApplication2(
            reference.pointer,
            _id_getResourcesForApplication2 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageArchiveInfo = _class.instanceMethodId(
    r'getPackageArchiveInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageArchiveInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageArchiveInfo(
    jni.JString string,
    int i,
  ) {
    return _getPackageArchiveInfo(
            reference.pointer,
            _id_getPackageArchiveInfo as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $PackageInfoType());
  }

  static final _id_getPackageArchiveInfo1 = _class.instanceMethodId(
    r'getPackageArchiveInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageArchiveInfo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)
  /// The returned object must be released after use, by calling the [release] method.
  PackageInfo getPackageArchiveInfo1(
    jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageArchiveInfo1(
            reference.pointer,
            _id_getPackageArchiveInfo1 as jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const $PackageInfoType());
  }

  static final _id_verifyPendingInstall = _class.instanceMethodId(
    r'verifyPendingInstall',
    r'(II)V',
  );

  static final _verifyPendingInstall = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public abstract void verifyPendingInstall(int i, int i1)
  void verifyPendingInstall(
    int i,
    int i1,
  ) {
    _verifyPendingInstall(reference.pointer,
            _id_verifyPendingInstall as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_extendVerificationTimeout = _class.instanceMethodId(
    r'extendVerificationTimeout',
    r'(IIJ)V',
  );

  static final _extendVerificationTimeout = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Int64)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: public abstract void extendVerificationTimeout(int i, int i1, long j)
  void extendVerificationTimeout(
    int i,
    int i1,
    int j,
  ) {
    _extendVerificationTimeout(reference.pointer,
            _id_extendVerificationTimeout as jni.JMethodIDPtr, i, i1, j)
        .check();
  }

  static final _id_setInstallerPackageName = _class.instanceMethodId(
    r'setInstallerPackageName',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _setInstallerPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setInstallerPackageName(java.lang.String string, java.lang.String string1)
  void setInstallerPackageName(
    jni.JString string,
    jni.JString string1,
  ) {
    _setInstallerPackageName(
            reference.pointer,
            _id_setInstallerPackageName as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_getInstallerPackageName = _class.instanceMethodId(
    r'getInstallerPackageName',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getInstallerPackageName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getInstallerPackageName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getInstallerPackageName(
    jni.JString string,
  ) {
    return _getInstallerPackageName(
            reference.pointer,
            _id_getInstallerPackageName as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getInstallSourceInfo = _class.instanceMethodId(
    r'getInstallSourceInfo',
    r'(Ljava/lang/String;)Landroid/content/pm/InstallSourceInfo;',
  );

  static final _getInstallSourceInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getInstallSourceInfo(
    jni.JString string,
  ) {
    return _getInstallSourceInfo(
            reference.pointer,
            _id_getInstallSourceInfo as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_addPackageToPreferred = _class.instanceMethodId(
    r'addPackageToPreferred',
    r'(Ljava/lang/String;)V',
  );

  static final _addPackageToPreferred = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void addPackageToPreferred(java.lang.String string)
  void addPackageToPreferred(
    jni.JString string,
  ) {
    _addPackageToPreferred(
            reference.pointer,
            _id_addPackageToPreferred as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_removePackageFromPreferred = _class.instanceMethodId(
    r'removePackageFromPreferred',
    r'(Ljava/lang/String;)V',
  );

  static final _removePackageFromPreferred = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removePackageFromPreferred(java.lang.String string)
  void removePackageFromPreferred(
    jni.JString string,
  ) {
    _removePackageFromPreferred(
            reference.pointer,
            _id_removePackageFromPreferred as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getPreferredPackages = _class.instanceMethodId(
    r'getPreferredPackages',
    r'(I)Ljava/util/List;',
  );

  static final _getPreferredPackages = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.util.List getPreferredPackages(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageInfo> getPreferredPackages(
    int i,
  ) {
    return _getPreferredPackages(
            reference.pointer, _id_getPreferredPackages as jni.JMethodIDPtr, i)
        .object(const jni.JListType($PackageInfoType()));
  }

  static final _id_addPreferredActivity = _class.instanceMethodId(
    r'addPreferredActivity',
    r'(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V',
  );

  static final _addPreferredActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void addPreferredActivity(android.content.IntentFilter intentFilter, int i, android.content.ComponentName[] componentNames, android.content.ComponentName componentName)
  void addPreferredActivity(
    jni.JObject intentFilter,
    int i,
    jni.JArray<jni.JObject> componentNames,
    jni.JObject componentName,
  ) {
    _addPreferredActivity(
            reference.pointer,
            _id_addPreferredActivity as jni.JMethodIDPtr,
            intentFilter.reference.pointer,
            i,
            componentNames.reference.pointer,
            componentName.reference.pointer)
        .check();
  }

  static final _id_clearPackagePreferredActivities = _class.instanceMethodId(
    r'clearPackagePreferredActivities',
    r'(Ljava/lang/String;)V',
  );

  static final _clearPackagePreferredActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clearPackagePreferredActivities(java.lang.String string)
  void clearPackagePreferredActivities(
    jni.JString string,
  ) {
    _clearPackagePreferredActivities(
            reference.pointer,
            _id_clearPackagePreferredActivities as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getPreferredActivities = _class.instanceMethodId(
    r'getPreferredActivities',
    r'(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I',
  );

  static final _getPreferredActivities = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getPreferredActivities(java.util.List list, java.util.List list1, java.lang.String string)
  int getPreferredActivities(
    jni.JList<jni.JObject> list,
    jni.JList<jni.JObject> list1,
    jni.JString string,
  ) {
    return _getPreferredActivities(
            reference.pointer,
            _id_getPreferredActivities as jni.JMethodIDPtr,
            list.reference.pointer,
            list1.reference.pointer,
            string.reference.pointer)
        .integer;
  }

  static final _id_setComponentEnabledSetting = _class.instanceMethodId(
    r'setComponentEnabledSetting',
    r'(Landroid/content/ComponentName;II)V',
  );

  static final _setComponentEnabledSetting = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract void setComponentEnabledSetting(android.content.ComponentName componentName, int i, int i1)
  void setComponentEnabledSetting(
    jni.JObject componentName,
    int i,
    int i1,
  ) {
    _setComponentEnabledSetting(
            reference.pointer,
            _id_setComponentEnabledSetting as jni.JMethodIDPtr,
            componentName.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_setComponentEnabledSettings = _class.instanceMethodId(
    r'setComponentEnabledSettings',
    r'(Ljava/util/List;)V',
  );

  static final _setComponentEnabledSettings = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setComponentEnabledSettings(java.util.List list)
  void setComponentEnabledSettings(
    jni.JList<PackageManager_ComponentEnabledSetting> list,
  ) {
    _setComponentEnabledSettings(
            reference.pointer,
            _id_setComponentEnabledSettings as jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }

  static final _id_getComponentEnabledSetting = _class.instanceMethodId(
    r'getComponentEnabledSetting',
    r'(Landroid/content/ComponentName;)I',
  );

  static final _getComponentEnabledSetting = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getComponentEnabledSetting(android.content.ComponentName componentName)
  int getComponentEnabledSetting(
    jni.JObject componentName,
  ) {
    return _getComponentEnabledSetting(
            reference.pointer,
            _id_getComponentEnabledSetting as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .integer;
  }

  static final _id_getSyntheticAppDetailsActivityEnabled =
      _class.instanceMethodId(
    r'getSyntheticAppDetailsActivityEnabled',
    r'(Ljava/lang/String;)Z',
  );

  static final _getSyntheticAppDetailsActivityEnabled =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getSyntheticAppDetailsActivityEnabled(java.lang.String string)
  bool getSyntheticAppDetailsActivityEnabled(
    jni.JString string,
  ) {
    return _getSyntheticAppDetailsActivityEnabled(
            reference.pointer,
            _id_getSyntheticAppDetailsActivityEnabled as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_setApplicationEnabledSetting = _class.instanceMethodId(
    r'setApplicationEnabledSetting',
    r'(Ljava/lang/String;II)V',
  );

  static final _setApplicationEnabledSetting = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract void setApplicationEnabledSetting(java.lang.String string, int i, int i1)
  void setApplicationEnabledSetting(
    jni.JString string,
    int i,
    int i1,
  ) {
    _setApplicationEnabledSetting(
            reference.pointer,
            _id_setApplicationEnabledSetting as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_getApplicationEnabledSetting = _class.instanceMethodId(
    r'getApplicationEnabledSetting',
    r'(Ljava/lang/String;)I',
  );

  static final _getApplicationEnabledSetting = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getApplicationEnabledSetting(java.lang.String string)
  int getApplicationEnabledSetting(
    jni.JString string,
  ) {
    return _getApplicationEnabledSetting(
            reference.pointer,
            _id_getApplicationEnabledSetting as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_isSafeMode = _class.instanceMethodId(
    r'isSafeMode',
    r'()Z',
  );

  static final _isSafeMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isSafeMode()
  bool isSafeMode() {
    return _isSafeMode(reference.pointer, _id_isSafeMode as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPackageSuspended = _class.instanceMethodId(
    r'isPackageSuspended',
    r'(Ljava/lang/String;)Z',
  );

  static final _isPackageSuspended = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPackageSuspended(java.lang.String string)
  bool isPackageSuspended(
    jni.JString string,
  ) {
    return _isPackageSuspended(
            reference.pointer,
            _id_isPackageSuspended as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_isPackageSuspended1 = _class.instanceMethodId(
    r'isPackageSuspended',
    r'()Z',
  );

  static final _isPackageSuspended1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isPackageSuspended()
  bool isPackageSuspended1() {
    return _isPackageSuspended1(
            reference.pointer, _id_isPackageSuspended1 as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSuspendedPackageAppExtras = _class.instanceMethodId(
    r'getSuspendedPackageAppExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getSuspendedPackageAppExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.os.Bundle getSuspendedPackageAppExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSuspendedPackageAppExtras() {
    return _getSuspendedPackageAppExtras(reference.pointer,
            _id_getSuspendedPackageAppExtras as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setApplicationCategoryHint = _class.instanceMethodId(
    r'setApplicationCategoryHint',
    r'(Ljava/lang/String;I)V',
  );

  static final _setApplicationCategoryHint = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void setApplicationCategoryHint(java.lang.String string, int i)
  void setApplicationCategoryHint(
    jni.JString string,
    int i,
  ) {
    _setApplicationCategoryHint(
            reference.pointer,
            _id_setApplicationCategoryHint as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_isDeviceUpgrading = _class.instanceMethodId(
    r'isDeviceUpgrading',
    r'()Z',
  );

  static final _isDeviceUpgrading = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isDeviceUpgrading()
  bool isDeviceUpgrading() {
    return _isDeviceUpgrading(
            reference.pointer, _id_isDeviceUpgrading as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPackageInstaller = _class.instanceMethodId(
    r'getPackageInstaller',
    r'()Landroid/content/pm/PackageInstaller;',
  );

  static final _getPackageInstaller = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.PackageInstaller getPackageInstaller()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageInstaller() {
    return _getPackageInstaller(
            reference.pointer, _id_getPackageInstaller as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_canRequestPackageInstalls = _class.instanceMethodId(
    r'canRequestPackageInstalls',
    r'()Z',
  );

  static final _canRequestPackageInstalls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean canRequestPackageInstalls()
  bool canRequestPackageInstalls() {
    return _canRequestPackageInstalls(reference.pointer,
            _id_canRequestPackageInstalls as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasSigningCertificate = _class.instanceMethodId(
    r'hasSigningCertificate',
    r'(Ljava/lang/String;[BI)Z',
  );

  static final _hasSigningCertificate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasSigningCertificate(java.lang.String string, byte[] bs, int i)
  bool hasSigningCertificate(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    int i,
  ) {
    return _hasSigningCertificate(
            reference.pointer,
            _id_hasSigningCertificate as jni.JMethodIDPtr,
            string.reference.pointer,
            bs.reference.pointer,
            i)
        .boolean;
  }

  static final _id_hasSigningCertificate1 = _class.instanceMethodId(
    r'hasSigningCertificate',
    r'(I[BI)Z',
  );

  static final _hasSigningCertificate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasSigningCertificate(int i, byte[] bs, int i1)
  bool hasSigningCertificate1(
    int i,
    jni.JArray<jni.jbyte> bs,
    int i1,
  ) {
    return _hasSigningCertificate1(
            reference.pointer,
            _id_hasSigningCertificate1 as jni.JMethodIDPtr,
            i,
            bs.reference.pointer,
            i1)
        .boolean;
  }

  static final _id_requestChecksums = _class.instanceMethodId(
    r'requestChecksums',
    r'(Ljava/lang/String;ZILjava/util/List;Landroid/content/pm/PackageManager$OnChecksumsReadyListener;)V',
  );

  static final _requestChecksums = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void requestChecksums(java.lang.String string, boolean z, int i, java.util.List list, android.content.pm.PackageManager$OnChecksumsReadyListener onChecksumsReadyListener)
  void requestChecksums(
    jni.JString string,
    bool z,
    int i,
    jni.JList<jni.JObject> list,
    PackageManager_OnChecksumsReadyListener onChecksumsReadyListener,
  ) {
    _requestChecksums(
            reference.pointer,
            _id_requestChecksums as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            i,
            list.reference.pointer,
            onChecksumsReadyListener.reference.pointer)
        .check();
  }

  static final _id_isAutoRevokeWhitelisted1 = _class.instanceMethodId(
    r'isAutoRevokeWhitelisted',
    r'()Z',
  );

  static final _isAutoRevokeWhitelisted1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isAutoRevokeWhitelisted()
  bool isAutoRevokeWhitelisted1() {
    return _isAutoRevokeWhitelisted1(
            reference.pointer, _id_isAutoRevokeWhitelisted1 as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDefaultApplicationIcon = _class.instanceMethodId(
    r'isDefaultApplicationIcon',
    r'(Landroid/graphics/drawable/Drawable;)Z',
  );

  static final _isDefaultApplicationIcon = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable drawable)
  bool isDefaultApplicationIcon(
    jni.JObject drawable,
  ) {
    return _isDefaultApplicationIcon(
            reference.pointer,
            _id_isDefaultApplicationIcon as jni.JMethodIDPtr,
            drawable.reference.pointer)
        .boolean;
  }

  static final _id_setMimeGroup = _class.instanceMethodId(
    r'setMimeGroup',
    r'(Ljava/lang/String;Ljava/util/Set;)V',
  );

  static final _setMimeGroup = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMimeGroup(java.lang.String string, java.util.Set set)
  void setMimeGroup(
    jni.JString string,
    jni.JSet<jni.JString> set0,
  ) {
    _setMimeGroup(reference.pointer, _id_setMimeGroup as jni.JMethodIDPtr,
            string.reference.pointer, set0.reference.pointer)
        .check();
  }

  static final _id_getMimeGroup = _class.instanceMethodId(
    r'getMimeGroup',
    r'(Ljava/lang/String;)Ljava/util/Set;',
  );

  static final _getMimeGroup = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set getMimeGroup(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getMimeGroup(
    jni.JString string,
  ) {
    return _getMimeGroup(reference.pointer,
            _id_getMimeGroup as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getProperty = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/pm/PackageManager$Property;',
  );

  static final _getProperty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.PackageManager$Property getProperty(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty(
    jni.JString string,
    jni.JString string1,
  ) {
    return _getProperty(reference.pointer, _id_getProperty as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $PackageManager_PropertyType());
  }

  static final _id_getProperty1 = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/pm/PackageManager$Property;',
  );

  static final _getProperty1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.PackageManager$Property getProperty(java.lang.String string, android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty1(
    jni.JString string,
    jni.JObject componentName,
  ) {
    return _getProperty1(
            reference.pointer,
            _id_getProperty1 as jni.JMethodIDPtr,
            string.reference.pointer,
            componentName.reference.pointer)
        .object(const $PackageManager_PropertyType());
  }

  static final _id_queryApplicationProperty = _class.instanceMethodId(
    r'queryApplicationProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryApplicationProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryApplicationProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryApplicationProperty(
    jni.JString string,
  ) {
    return _queryApplicationProperty(
            reference.pointer,
            _id_queryApplicationProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType($PackageManager_PropertyType()));
  }

  static final _id_queryActivityProperty = _class.instanceMethodId(
    r'queryActivityProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryActivityProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryActivityProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryActivityProperty(
    jni.JString string,
  ) {
    return _queryActivityProperty(
            reference.pointer,
            _id_queryActivityProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType($PackageManager_PropertyType()));
  }

  static final _id_queryProviderProperty = _class.instanceMethodId(
    r'queryProviderProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryProviderProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryProviderProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryProviderProperty(
    jni.JString string,
  ) {
    return _queryProviderProperty(
            reference.pointer,
            _id_queryProviderProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType($PackageManager_PropertyType()));
  }

  static final _id_queryReceiverProperty = _class.instanceMethodId(
    r'queryReceiverProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryReceiverProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryReceiverProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryReceiverProperty(
    jni.JString string,
  ) {
    return _queryReceiverProperty(
            reference.pointer,
            _id_queryReceiverProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType($PackageManager_PropertyType()));
  }

  static final _id_queryServiceProperty = _class.instanceMethodId(
    r'queryServiceProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryServiceProperty = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List queryServiceProperty(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<PackageManager_Property> queryServiceProperty(
    jni.JString string,
  ) {
    return _queryServiceProperty(
            reference.pointer,
            _id_queryServiceProperty as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType($PackageManager_PropertyType()));
  }

  static final _id_canPackageQuery = _class.instanceMethodId(
    r'canPackageQuery',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _canPackageQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canPackageQuery(java.lang.String string, java.lang.String string1)
  bool canPackageQuery(
    jni.JString string,
    jni.JString string1,
  ) {
    return _canPackageQuery(
            reference.pointer,
            _id_canPackageQuery as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .boolean;
  }

  static final _id_canPackageQuery1 = _class.instanceMethodId(
    r'canPackageQuery',
    r'(Ljava/lang/String;[Ljava/lang/String;)[Z',
  );

  static final _canPackageQuery1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] canPackageQuery(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> canPackageQuery1(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _canPackageQuery1(
            reference.pointer,
            _id_canPackageQuery1 as jni.JMethodIDPtr,
            string.reference.pointer,
            strings.reference.pointer)
        .object(const jni.JArrayType(jni.jbooleanType()));
  }

  static final _id_relinquishUpdateOwnership = _class.instanceMethodId(
    r'relinquishUpdateOwnership',
    r'(Ljava/lang/String;)V',
  );

  static final _relinquishUpdateOwnership = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void relinquishUpdateOwnership(java.lang.String string)
  void relinquishUpdateOwnership(
    jni.JString string,
  ) {
    _relinquishUpdateOwnership(
            reference.pointer,
            _id_relinquishUpdateOwnership as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $PackageManagerType extends jni.JObjType<PackageManager> {
  const $PackageManagerType();

  @override
  String get signature => r'Landroid/content/pm/PackageManager;';

  @override
  PackageManager fromReference(jni.JReference reference) =>
      PackageManager.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PackageManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManagerType) &&
        other is $PackageManagerType;
  }
}

/// from: android.content.Context$BindServiceFlags
class Context_BindServiceFlags extends jni.JObject {
  @override
  late final jni.JObjType<Context_BindServiceFlags> $type = type;

  Context_BindServiceFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $Context_BindServiceFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.Context$BindServiceFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Context_BindServiceFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $Context_BindServiceFlagsType());
  }
}

final class $Context_BindServiceFlagsType
    extends jni.JObjType<Context_BindServiceFlags> {
  const $Context_BindServiceFlagsType();

  @override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @override
  Context_BindServiceFlags fromReference(jni.JReference reference) =>
      Context_BindServiceFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_BindServiceFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_BindServiceFlagsType) &&
        other is $Context_BindServiceFlagsType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni.JStringType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APP_OPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUDIO_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni.JStringType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BATTERY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_ACTIVITY_STARTS
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final long BIND_EXTERNAL_SERVICE_LONG
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_SHARED_ISOLATED_PROCESS
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CAMERA_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni.JStringType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni.JStringType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CREDENTIAL_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni.JStringType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int DEVICE_ID_DEFAULT
  static const DEVICE_ID_DEFAULT = 0;

  /// from: static public final int DEVICE_ID_INVALID
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEVICE_LOCK_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni.JStringType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni.JStringType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DROPBOX_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni.JStringType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EUICC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni.JStringType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GAME_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni.JStringType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni.JStringType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEALTHCONNECT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IPSEC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni.JStringType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni.JStringType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LOCALE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LOCATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MIDI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NFC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni.JStringType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NSD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni.JStringType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String OVERLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PEOPLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String POWER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni.JStringType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni.JStringType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ROLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SENSOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STORAGE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELECOM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni.JStringType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String UI_MODE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni.JStringType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USB_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni.JStringType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIRTUAL_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni.JStringType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni.JStringType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WINDOW_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni.JMethodIDPtr)
        .object(const $PackageManagerType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getString1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return _getString1(reference.pointer, _id_getString1 as jni.JMethodIDPtr, i,
            objects.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes(
            reference.pointer,
            _id_obtainStyledAttributes as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes1(
            reference.pointer,
            _id_obtainStyledAttributes1 as jni.JMethodIDPtr,
            i,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes2(
            reference.pointer,
            _id_obtainStyledAttributes2 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return _obtainStyledAttributes3(
            reference.pointer,
            _id_obtainStyledAttributes3 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer,
            i,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return _getParams(reference.pointer, _id_getParams as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  ApplicationInfo getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni.JMethodIDPtr)
        .object(const $ApplicationInfoType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return _getSharedPreferences(
            reference.pointer,
            _id_getSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return _deleteSharedPreferences(
            reference.pointer,
            _id_deleteSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return _deleteFile(reference.pointer, _id_deleteFile as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return _getFilesDir(reference.pointer, _id_getFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return _getExternalFilesDir(
            reference.pointer,
            _id_getExternalFilesDir as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return _getExternalFilesDirs(
            reference.pointer,
            _id_getExternalFilesDirs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return _getCacheDir(reference.pointer, _id_getCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return _fileList(reference.pointer, _id_fileList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return _getDir(reference.pointer, _id_getDir as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return _openOrCreateDatabase1(
            reference.pointer,
            _id_openOrCreateDatabase1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer,
            databaseErrorHandler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    _setWallpaper(reference.pointer, _id_setWallpaper as jni.JMethodIDPtr,
            bitmap.reference.pointer)
        .check();
  }

  static final _id_setWallpaper1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    _setWallpaper1(reference.pointer, _id_setWallpaper1 as jni.JMethodIDPtr,
            inputStream.reference.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    jni.JObject intent,
  ) {
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    jni.JObject intent,
    jni.JString string,
  ) {
    _sendBroadcast1(reference.pointer, _id_sendBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    jni.JObject intent,
    jni.JArray<jni.JString> strings,
  ) {
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni.JMethodIDPtr,
            intent.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendBroadcast2(
            reference.pointer,
            _id_sendBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    jni.JObject intent,
    jni.JString string,
  ) {
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast1(
            reference.pointer,
            _id_sendOrderedBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast2(
            reference.pointer,
            _id_sendOrderedBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)
  void sendOrderedBroadcast3(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle1,
  ) {
    _sendOrderedBroadcast3(
            reference.pointer,
            _id_sendOrderedBroadcast3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle1.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    _sendBroadcastAsUser1(
            reference.pointer,
            _id_sendBroadcastAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast4(
    jni.JObject intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast4(
            reference.pointer,
            _id_sendOrderedBroadcast4 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string2.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    jni.JObject intent,
  ) {
    _sendStickyBroadcast(
            reference.pointer,
            _id_sendStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    _sendStickyBroadcast1(
            reference.pointer,
            _id_sendStickyBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    jni.JObject intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    jni.JObject intent,
  ) {
    _removeStickyBroadcast(
            reference.pointer,
            _id_removeStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return _registerReceiver1(
            reference.pointer,
            _id_registerReceiver1 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return _registerReceiver2(
            reference.pointer,
            _id_registerReceiver2 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return _registerReceiver3(
            reference.pointer,
            _id_registerReceiver3 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    jni.JObject intent,
  ) {
    return _startService(reference.pointer,
            _id_startService as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    jni.JObject intent,
  ) {
    return _startForegroundService(
            reference.pointer,
            _id_startForegroundService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    jni.JObject intent,
  ) {
    return _stopService(reference.pointer, _id_stopService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return _bindService(reference.pointer, _id_bindService as jni.JMethodIDPtr,
            intent.reference.pointer, serviceConnection.reference.pointer, i)
        .boolean;
  }

  static final _id_bindService1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)
  bool bindService1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
  ) {
    return _bindService1(
            reference.pointer,
            _id_bindService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer)
        .boolean;
  }

  static final _id_bindService2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService2(
    jni.JObject intent,
    int i,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService2(
            reference.pointer,
            _id_bindService2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindService3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService3(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService3(
            reference.pointer,
            _id_bindService3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    jni.JObject intent,
    int i,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService1(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService1(
            reference.pointer,
            _id_bindIsolatedService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            i,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)
  bool bindServiceAsUser1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser1(
            reference.pointer,
            _id_bindServiceAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni.JMethodIDPtr,
            serviceConnection.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    _unbindService(reference.pointer, _id_unbindService as jni.JMethodIDPtr,
            serviceConnection.reference.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni.JMethodIDPtr,
            componentName.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSystemService1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService1(reference.pointer,
            _id_getSystemService1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(T);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return _getSystemServiceName(
            reference.pointer,
            _id_getSystemServiceName as jni.JMethodIDPtr,
            class0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return _checkCallingPermission(
            reference.pointer,
            _id_checkCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return _checkSelfPermission(
            reference.pointer,
            _id_checkSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission(
            reference.pointer,
            _id_revokeUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission1(
            reference.pointer,
            _id_revokeUriPermission1 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i,
            i1,
            i2)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkUriPermission1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission1(
            reference.pointer,
            _id_checkUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceUriPermission1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    _enforceUriPermission1(
            reference.pointer,
            _id_enforceUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2,
            string2.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni.JMethodIDPtr,
            collection.reference.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return _createPackageContext(
            reference.pointer,
            _id_createPackageContext as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $ContextType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return _createContextForSplit(
            reference.pointer,
            _id_createContextForSplit as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return _createDisplayContext(
            reference.pointer,
            _id_createDisplayContext as jni.JMethodIDPtr,
            display.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Context createDeviceContext(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
            reference.pointer, _id_createDeviceContext as jni.JMethodIDPtr, i)
        .object(const $ContextType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext(
            reference.pointer,
            _id_createWindowContext as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createWindowContext1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext1(
            reference.pointer,
            _id_createWindowContext1 as jni.JMethodIDPtr,
            display.reference.pointer,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return _createContext(
            reference.pointer,
            _id_createContext as jni.JMethodIDPtr,
            contextParams.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getDeviceId()
  int getDeviceId() {
    return _getDeviceId(reference.pointer, _id_getDeviceId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)
  void registerDeviceIdChangeListener(
    jni.JObject executor,
    jni.JObject intConsumer,
  ) {
    _registerDeviceIdChangeListener(
            reference.pointer,
            _id_registerDeviceIdChangeListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)
  void unregisterDeviceIdChangeListener(
    jni.JObject intConsumer,
  ) {
    _unregisterDeviceIdChangeListener(
            reference.pointer,
            _id_unregisterDeviceIdChangeListener as jni.JMethodIDPtr,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(
            reference.pointer, _id_isDeviceProtectedStorage as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r'Landroid/content/Context;';

  @override
  Context fromReference(jni.JReference reference) =>
      Context.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}
