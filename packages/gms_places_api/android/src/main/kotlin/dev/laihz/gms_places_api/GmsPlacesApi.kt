// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.laihz.gms_places_api

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PlacesFilterType(val raw: Int) {
  /** Geocoding results, as opposed to business results. */
  GEOCODE(0),
  /** Geocoding results with a precise address. */
  ADDRESS(1),
  /** Business results. */
  ESTABLISHMENT(2),
  /**
   * * Results that match the following types:
   * * "locality",
   * * "sublocality"
   * * "postal_code",
   * * "country",
   * * "administrative_area_level_1",
   * * "administrative_area_level_2"
   */
  REGION(3),
  /**
   * * Results that match the following types:
   * * "locality",
   * * "administrative_area_level_3"
   */
  CITY(4);

  companion object {
    fun ofRaw(raw: Int): PlacesFilterType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Prediction (
  val attributed: PredictionAttributed,
  val placeID: String,
  val rawTypes: List<String?>,
  val distanceMeters: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Prediction {
      val attributed = PredictionAttributed.fromList(list[0] as List<Any?>)
      val placeID = list[1] as String
      val rawTypes = list[2] as List<String?>
      val distanceMeters = list[3] as Double?
      return Prediction(attributed, placeID, rawTypes, distanceMeters)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      attributed.toList(),
      placeID,
      rawTypes,
      distanceMeters,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PredictionAttributed (
  val fullText: String,
  val primaryText: String,
  val secondaryText: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PredictionAttributed {
      val fullText = list[0] as String
      val primaryText = list[1] as String
      val secondaryText = list[2] as String?
      return PredictionAttributed(fullText, primaryText, secondaryText)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fullText,
      primaryText,
      secondaryText,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object GmsPlacesApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Prediction.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PredictionAttributed.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Prediction -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PredictionAttributed -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface GmsPlacesApi {
  fun ensureInitialized()
  fun autocomplete(fromQuery: String, filter: PlacesFilterType, callback: (Result<List<Prediction>>) -> Unit)

  companion object {
    /** The codec used by GmsPlacesApi. */
    val codec: MessageCodec<Any?> by lazy {
      GmsPlacesApiCodec
    }
    /** Sets up an instance of `GmsPlacesApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: GmsPlacesApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gms_places_api.GmsPlacesApi.ensureInitialized", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.ensureInitialized()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gms_places_api.GmsPlacesApi.autocomplete", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fromQueryArg = args[0] as String
            val filterArg = PlacesFilterType.ofRaw(args[1] as Int)!!
            api.autocomplete(fromQueryArg, filterArg) { result: Result<List<Prediction>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
